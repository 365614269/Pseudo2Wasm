content_scripts.js:1 今天您打开了 26 次 localhost:8080，花费了 7 分 16 秒 来浏览它。
content_scripts.js:1 你可以在【网费很贵】的选项中关闭以上提示！
index.js:551 [webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.
log.js:39 [HMR] Waiting for update signal from WDS...
 0
 OUTPUT 9 + 1
 (5) [Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (call $logInteger
   (i32.add
    (i32.const 9)
    (i32.const 1)
   )
  )
 )
)

 10
 1
 DECLARE i:INTEGER
DECLARE j:INTEGER
DECLARE k:REAL

i <- 1
j <- 2
k <- 3.14
OUTPUT i + j * k

 (28) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(7)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (global $k (mut f64) (f64.const 0))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (global.set $k
   (f64.const 0)
  )
  (global.set $i
   (i32.const 1)
  )
  (global.set $j
   (i32.const 2)
  )
  (global.set $k
   (f64.const 3.14)
  )
  (call $logReal
   (f64.add
    (f64.convert_i32_s
     (global.get $i)
    )
    (f64.mul
     (f64.convert_i32_s
      (global.get $j)
     )
     (global.get $k)
    )
   )
  )
 )
)

 7.28
 2
 DECLARE i:INTEGER
DECLARE j:INTEGER

i <- -1.99
j <- 2.99
IF i = j + i THEN
    OUTPUT 1
ELSE
    OUTPUT 2
ENDIF

 (29) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (global.set $i
   (i32.trunc_f64_s
    (f64.neg
     (f64.const 1.99)
    )
   )
  )
  (global.set $j
   (i32.trunc_f64_s
    (f64.const 2.99)
   )
  )
  (if
   (i32.eq
    (global.get $i)
    (i32.add
     (global.get $j)
     (global.get $i)
    )
   )
   (call $logInteger
    (i32.const 1)
   )
   (call $logInteger
    (i32.const 2)
   )
  )
 )
)

 2
 3
 DECLARE i:STRING
i <- "Hi"
OUTPUT i

 (10) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (data $0 (i32.const 0) "Hi\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (global.set $i
   (i32.const 0)
  )
  (global.set $i
   (i32.const 0)
  )
  (call $logString
   (global.get $i)
  )
 )
)

 Hi
 4
 DECLARE i:INTEGER
DECLARE j:INTEGER

i <- 1
WHILE i < 10
    i <- i + 1
    j <- i
ENDWHILE

OUTPUT j

 (27) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (global.set $i
   (i32.const 1)
  )
  (loop $1
   (if
    (i32.lt_s
     (global.get $i)
     (i32.const 10)
    )
    (block
     (global.set $i
      (i32.add
       (global.get $i)
       (i32.const 1)
      )
     )
     (global.set $j
      (global.get $i)
     )
     (br $1)
    )
   )
  )
  (call $logInteger
   (global.get $j)
  )
 )
)

 10
 5
 DECLARE i:INTEGER
DECLARE j:INTEGER

i <- 1
REPEAT
    i <- i + 1
    j <- i
UNTIL i = 10

OUTPUT j

 (27) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (global.set $i
   (i32.const 1)
  )
  (loop $1
   (global.set $i
    (i32.add
     (global.get $i)
     (i32.const 1)
    )
   )
   (global.set $j
    (global.get $i)
   )
   (if
    (i32.eqz
     (i32.eq
      (global.get $i)
      (i32.const 10)
     )
    )
    (br $1)
   )
  )
  (call $logInteger
   (global.get $j)
  )
 )
)

 10
 6
 DECLARE i:INTEGER
DECLARE j:INTEGER

FOR i <- 1 TO 11
    j <- i
NEXT i

OUTPUT j

 (22) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(4)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (block
   (global.set $i
    (i32.const 1)
   )
   (loop $1
    (if
     (i32.ge_s
      (i32.const 11)
      (global.get $i)
     )
     (block
      (global.set $j
       (global.get $i)
      )
      (global.set $i
       (i32.add
        (global.get $i)
        (i32.const 1)
       )
      )
      (br $1)
     )
    )
   )
  )
  (call $logInteger
   (global.get $j)
  )
 )
)

 11
 7
 FUNCTION add(a:INTEGER, b:INTEGER) RETURNS INTEGER
    RETURN a + b
ENDFUNCTION

DECLARE i:INTEGER
DECLARE j:INTEGER

i <- 1
j <- 2
OUTPUT add(i, j)

 (40) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(6)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $add (param $0 i32) (param $1 i32) (result i32)
  (return
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
 )
 (func $__main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (global.set $i
   (i32.const 1)
  )
  (global.set $j
   (i32.const 2)
  )
  (call $logInteger
   (call $add
    (global.get $i)
    (global.get $j)
   )
  )
 )
)

 3
 8
 FUNCTION for(a:INTEGER) RETURNS INTEGER
    DECLARE b:INTEGER
    DECLARE c:INTEGER

    FOR b <- 1 TO a
        c <- b
    NEXT b
    RETURN c
ENDFUNCTION

OUTPUT for(10)

 (37) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(2)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $for (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (i32.const 0)
  )
  (local.set $2
   (i32.const 0)
  )
  (block
   (local.set $1
    (i32.const 1)
   )
   (loop $1
    (if
     (i32.ge_s
      (local.get $0)
      (local.get $1)
     )
     (block
      (local.set $2
       (local.get $1)
      )
      (local.set $1
       (i32.add
        (local.get $1)
        (i32.const 1)
       )
      )
      (br $1)
     )
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (call $logInteger
   (call $for
    (i32.const 10)
   )
  )
 )
)

 10
 9
 FUNCTION for(a:INTEGER) RETURNS INTEGER
    DECLARE b:INTEGER

    FOR a <- 1 TO 11
        b <- a
    NEXT a
    RETURN b
ENDFUNCTION

OUTPUT for(1)

 (33) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(2)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $for (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (i32.const 0)
  )
  (block
   (local.set $0
    (i32.const 1)
   )
   (loop $1
    (if
     (i32.ge_s
      (i32.const 11)
      (local.get $0)
     )
     (block
      (local.set $1
       (local.get $0)
      )
      (local.set $0
       (i32.add
        (local.get $0)
        (i32.const 1)
       )
      )
      (br $1)
     )
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (call $logInteger
   (call $for
    (i32.const 1)
   )
  )
 )
)

 11
 10
 FUNCTION recur(a:INTEGER) RETURNS INTEGER
    IF a = 10 THEN
        RETURN a
    ENDIF
    RETURN recur(a + 1)
ENDFUNCTION

OUTPUT recur(1)

 (31) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(2)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $recur (param $0 i32) (result i32)
  (if
   (i32.eq
    (local.get $0)
    (i32.const 10)
   )
   (return
    (local.get $0)
   )
  )
  (return
   (call $recur
    (i32.add
     (local.get $0)
     (i32.const 1)
    )
   )
  )
 )
 (func $__main
  (call $logInteger
   (call $recur
    (i32.const 1)
   )
  )
 )
)

 10
 11
 DECLARE a:INTEGER
a <- 1

FUNCTION scope() RETURNS INTEGER
    DECLARE b:INTEGER
    DECLARE c:INTEGER

    b <- 1
    c <- 2
    RETURN a + b + c
ENDFUNCTION

OUTPUT scope()

 (39) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(4)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $a (mut i32) (i32.const 0))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $scope (result i32)
  (local $0 i32)
  (local $1 i32)
  (local.set $0
   (i32.const 0)
  )
  (local.set $1
   (i32.const 0)
  )
  (local.set $0
   (i32.const 1)
  )
  (local.set $1
   (i32.const 2)
  )
  (return
   (i32.add
    (i32.add
     (global.get $a)
     (local.get $0)
    )
    (local.get $1)
   )
  )
 )
 (func $__main
  (global.set $a
   (i32.const 0)
  )
  (global.set $a
   (i32.const 1)
  )
  (call $logInteger
   (call $scope)
  )
 )
)

 4
 12
 PROCEDURE print(a:INTEGER)
    DECLARE b:INTEGER
    DECLARE c:INTEGER

    b <- 2
    c <- 2
    OUTPUT a + b + c
ENDPROCEDURE

CALL print(1)

 (34) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(2)}
 b BasicType {kind: 'BASIC', type: 'INTEGER'} 1 2
 c BasicType {kind: 'BASIC', type: 'INTEGER'} 2 2
 b BasicType {kind: 'BASIC', type: 'INTEGER'} 1 2
 c BasicType {kind: 'BASIC', type: 'INTEGER'} 2 2
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $print (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (i32.const 0)
  )
  (local.set $2
   (i32.const 0)
  )
  (local.set $1
   (i32.const 2)
  )
  (local.set $2
   (i32.const 2)
  )
  (call $logInteger
   (i32.add
    (i32.add
     (local.get $0)
     (local.get $1)
    )
    (local.get $2)
   )
  )
  (return)
 )
 (func $__main
  (call $print
   (i32.const 1)
  )
 )
)

compiler.ts:89 5
index.ts:507 13
index.ts:508 DECLARE i: INTEGER
i <- 1

PROCEDURE increment(BYREF a:INTEGER)
    a <- a + 1
ENDPROCEDURE

CALL increment(i)
OUTPUT i

compiler.ts:21 (29) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(5)}
index.ts:515  Error: Unknown variable 'a'
    at GlobalTable.getType (global.ts:39:19)
    at Generator.assignExpression (generator.ts:539:42)
    at Procedure.assignExpression (procedure.ts:378:35)
    at Procedure.generateExpression (procedure.ts:325:29)
    at Procedure.generateStatement (procedure.ts:632:29)
    at Procedure.generateStatements (procedure.ts:622:29)
    at Procedure.generateBlock (procedure.ts:616:45)
    at Procedure.generate (procedure.ts:93:32)
    at Generator.generateProcedureDefinition (generator.ts:484:37)
    at Generator.generateStatements (generator.ts:806:22)
(anonymous) @ index.ts:515
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
(anonymous) @ index.ts:1
__awaiter @ index.ts:1
compileTest @ index.ts:505
(anonymous) @ index.ts:532
await in (anonymous)(异步)
__webpack_require__.a @ async module:49
./src/index.ts @ error.ts:32
__webpack_require__ @ bootstrap:24
(anonymous) @ startup:6
(anonymous) @ startup:6
index.ts:524  Error: Unknown variable 'a'
    at GlobalTable.getType (global.ts:39:19)
    at Generator.assignExpression (generator.ts:539:42)
    at Procedure.assignExpression (procedure.ts:378:35)
    at Procedure.generateExpression (procedure.ts:325:29)
    at Procedure.generateStatement (procedure.ts:632:29)
    at Procedure.generateStatements (procedure.ts:622:29)
    at Procedure.generateBlock (procedure.ts:616:45)
    at Procedure.generate (procedure.ts:93:32)
    at Generator.generateProcedureDefinition (generator.ts:484:37)
    at Generator.generateStatements (generator.ts:806:22)
(anonymous) @ index.ts:524
rejected @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
(anonymous) @ index.ts:1
__awaiter @ index.ts:1
compileTest @ index.ts:505
(anonymous) @ index.ts:532
await in (anonymous)(异步)
__webpack_require__.a @ async module:49
./src/index.ts @ error.ts:32
__webpack_require__ @ bootstrap:24
(anonymous) @ startup:6
(anonymous) @ startup:6
index.ts:507 14
index.ts:508 DECLARE i: INTEGER
i <- 1

PROCEDURE increment()
    i <- i + 1
ENDPROCEDURE

CALL increment()
OUTPUT i

compiler.ts:21 (24) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(5)}
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_none (func))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $increment
  (global.set $i
   (i32.add
    (global.get $i)
    (i32.const 1)
   )
  )
  (return)
 )
 (func $__main
  (global.set $i
   (i32.const 0)
  )
  (global.set $i
   (i32.const 1)
  )
  (call $increment)
  (call $logInteger
   (global.get $i)
  )
 )
)

compiler.ts:89 2
index.ts:507 15
index.ts:508 FUNCTION add(a:REAL, b:REAL) RETURNS REAL
    DECLARE c: REAL
    c <- a + b
    RETURN c
ENDFUNCTION

DECLARE i: REAL
DECLARE j: REAL

i <- 1.1
j <- 2.2
OUTPUT add(i, j)

compiler.ts:21 (47) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(6)}
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $f64_f64_=>_f64 (func (param f64 f64) (result f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut f64) (f64.const 0))
 (global $j (mut f64) (f64.const 0))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $add (param $0 f64) (param $1 f64) (result f64)
  (local $2 f64)
  (local.set $2
   (f64.const 0)
  )
  (local.set $2
   (f64.add
    (local.get $0)
    (local.get $1)
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (global.set $i
   (f64.const 0)
  )
  (global.set $j
   (f64.const 0)
  )
  (global.set $i
   (f64.const 1.1)
  )
  (global.set $j
   (f64.const 2.2)
  )
  (call $logReal
   (call $add
    (global.get $i)
    (global.get $j)
   )
  )
 )
)

compiler.ts:93 3.3000000000000003
index.ts:507 16
index.ts:508 OUTPUT 'a'
compiler.ts:21 (3) [Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(1)}
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (call $logChar
   (i32.const 97)
  )
 )
)

compiler.ts:97 a
index.ts:507 17
index.ts:508 DECLARE i: CHAR
i <- 'v'

OUTPUT i

compiler.ts:21 (10) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(3)}
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (global.set $i
   (i32.const 0)
  )
  (global.set $i
   (i32.const 118)
  )
  (call $logChar
   (global.get $i)
  )
 )
)

compiler.ts:97 v
index.ts:507 18
index.ts:508 DECLARE i: INTEGER

i <- 1
OUTPUT -i

compiler.ts:21 (11) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(3)}
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (global.set $i
   (i32.const 0)
  )
  (global.set $i
   (i32.const 1)
  )
  (call $logInteger
   (i32.sub
    (i32.const 0)
    (global.get $i)
   )
  )
 )
)

compiler.ts:89 -1
index.ts:507 19
index.ts:508 DECLARE i: REAL

i <- 1
OUTPUT -i

compiler.ts:21 (11) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(3)}
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut f64) (f64.const 0))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (global.set $i
   (f64.const 0)
  )
  (global.set $i
   (f64.convert_i32_s
    (i32.const 1)
   )
  )
  (call $logReal
   (f64.neg
    (global.get $i)
   )
  )
 )
)

compiler.ts:93 -1
index.ts:507 20
index.ts:508 DECLARE arr: ARRAY[0: 3] OF INTEGER

arr[0] <- 1
arr[1] <- 2
arr[2] <- 3

OUTPUT arr[0] + arr[1] + arr[2]
compiler.ts:21 (45) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(5)}
generator.ts:145 0
generator.ts:145 0
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $arr (mut i32) (i32.const 0))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (global.set $arr
   (i32.const 0)
  )
  (i32.store align=1
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 0)
     (i32.const 4)
    )
   )
   (i32.const 1)
  )
  (i32.store align=1
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 1)
     (i32.const 4)
    )
   )
   (i32.const 2)
  )
  (i32.store align=1
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 2)
     (i32.const 4)
    )
   )
   (i32.const 3)
  )
  (call $logInteger
   (i32.add
    (i32.add
     (i32.load align=1
      (i32.add
       (global.get $arr)
       (i32.mul
        (i32.const 0)
        (i32.const 4)
       )
      )
     )
     (i32.load align=1
      (i32.add
       (global.get $arr)
       (i32.mul
        (i32.const 1)
        (i32.const 4)
       )
      )
     )
    )
    (i32.load align=1
     (i32.add
      (global.get $arr)
      (i32.mul
       (i32.const 2)
       (i32.const 4)
      )
     )
    )
   )
  )
 )
)

compiler.ts:89 6
index.ts:507 21
index.ts:508 DECLARE arr: ARRAY[0: 10] OF INTEGER

arr[0] <- 1
arr[1] <- 2
arr[2] <- 3
arr[3] <- 4
arr[4] <- 5
arr[5] <- 6
arr[6] <- 7
arr[7] <- 8
arr[8] <- 9
arr[9] <- 10

OUTPUT arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]

compiler.ts:21 (122) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
compiler.ts:22 ProgramNode {kind: 0, body: Array(12)}
generator.ts:145 0
generator.ts:145 0
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $arr (mut i32) (i32.const 0))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (global.set $arr
   (i32.const 0)
  )
  (i32.store align=1
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 0)
     (i32.const 4)
    )
   )
   (i32.const 1)
  )
  (i32.store align=1
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 1)
     (i32.const 4)
    )
   )
   (i32.const 2)
  )
  (i32.store align=1
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 2)
     (i32.const 4)
    )
   )
   (i32.const 3)
  )
  (i32.store align=1
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 3)
     (i32.const 4)
    )
   )
   (i32.const 4)
  )
  (i32.store align=1
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 4)
     (i32.const 4)
    )
   )
   (i32.const 5)
  )
  (i32.store align=1
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 5)
     (i32.const 4)
    )
   )
   (i32.const 6)
  )
  (i32.store align=1
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 6)
     (i32.const 4)
    )
   )
   (i32.const 7)
  )
  (i32.store align=1
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 7)
     (i32.const 4)
    )
   )
   (i32.const 8)
  )
  (i32.store align=1
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 8)
     (i32.const 4)
    )
   )
   (i32.const 9)
  )
  (i32.store align=1
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 9)
     (i32.const 4)
    )
   )
   (i32.const 10)
  )
  (call $logInteger
   (i32.add
    (i32.add
     (i32.add
      (i32.add
       (i32.add
        (i32.add
         (i32.add
          (i32.add
           (i32.add
            (i32.load align=1
             (i32.add
              (global.get $arr)
              (i32.mul
               (i32.const 0)
               (i32.const 4)
              )
             )
            )
            (i32.load align=1
             (i32.add
              (global.get $arr)
              (i32.mul
               (i32.const 1)
               (i32.const 4)
              )
             )
            )
           )
           (i32.load align=1
            (i32.add
             (global.get $arr)
             (i32.mul
              (i32.const 2)
              (i32.const 4)
             )
            )
           )
          )
          (i32.load align=1
           (i32.add
            (global.get $arr)
            (i32.mul
             (i32.const 3)
             (i32.const 4)
            )
           )
          )
         )
         (i32.load align=1
          (i32.add
           (global.get $arr)
           (i32.mul
            (i32.const 4)
            (i32.const 4)
           )
          )
         )
        )
        (i32.load align=1
         (i32.add
          (global.get $arr)
          (i32.mul
           (i32.const 5)
           (i32.const 4)
          )
         )
        )
       )
       (i32.load align=1
        (i32.add
         (global.get $arr)
         (i32.mul
          (i32.const 6)
          (i32.const 4)
         )
        )
       )
      )
      (i32.load align=1
       (i32.add
        (global.get $arr)
        (i32.mul
         (i32.const 7)
         (i32.const 4)
        )
       )
      )
     )
     (i32.load align=1
      (i32.add
       (global.get $arr)
       (i32.mul
        (i32.const 8)
        (i32.const 4)
       )
      )
     )
    )
    (i32.load align=1
     (i32.add
      (global.get $arr)
      (i32.mul
       (i32.const 9)
       (i32.const 4)
      )
     )
    )
   )
  )
 )
)

compiler.ts:89 55
index.ts:507 22
index.ts:508 DECLARE arr: ARRAY[0: 10] OF INTEGER
DECLARE i: INTEGER

FOR i <- 0 TO 10
    arr[i] <- i
NEXT i

DECLARE sum: INTEGER
sum <- 0
FOR i <- 0 TO 10
    sum <- sum + arr[i]
NEXT i

OUTPUT sum

compiler.ts:21 (55) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(7)}
generator.ts:145 0
generator.ts:145 0
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $arr (mut i32) (i32.const 0))
 (global $i (mut i32) (i32.const 0))
 (global $sum (mut i32) (i32.const 0))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (global.set $arr
   (i32.const 0)
  )
  (global.set $i
   (i32.const 0)
  )
  (block
   (global.set $i
    (i32.const 0)
   )
   (loop $1
    (if
     (i32.ge_s
      (i32.const 10)
      (global.get $i)
     )
     (block
      (i32.store align=1
       (i32.add
        (global.get $arr)
        (i32.mul
         (global.get $i)
         (i32.const 4)
        )
       )
       (global.get $i)
      )
      (global.set $i
       (i32.add
        (global.get $i)
        (i32.const 1)
       )
      )
      (br $1)
     )
    )
   )
  )
  (global.set $sum
   (i32.const 0)
  )
  (global.set $sum
   (i32.const 0)
  )
  (block
   (global.set $i
    (i32.const 0)
   )
   (loop $2
    (if
     (i32.ge_s
      (i32.const 10)
      (global.get $i)
     )
     (block
      (global.set $sum
       (i32.add
        (global.get $sum)
        (i32.load align=1
         (i32.add
          (global.get $arr)
          (i32.mul
           (global.get $i)
           (i32.const 4)
          )
         )
        )
       )
      )
      (global.set $i
       (i32.add
        (global.get $i)
        (i32.const 1)
       )
      )
      (br $2)
     )
    )
   )
  )
  (call $logInteger
   (global.get $sum)
  )
 )
)

compiler.ts:89 55
index.ts:507 23
index.ts:508 DECLARE arr: ARRAY[0: 10, 0: 10] OF INTEGER
DECLARE i: INTEGER
DECLARE j: INTEGER

FOR i <- 0 TO 10
    FOR j <- 0 TO 10
        arr[i, j] <- i + j
    NEXT j
NEXT i

DECLARE sum: INTEGER
sum <- 0
FOR i <- 0 TO 10
    FOR j <- 0 TO 10
        sum <- sum + arr[i, j]
    NEXT j
NEXT i

OUTPUT sum

index.ts:515  SyntaxError {message: "Expected ']'", line: 1, startColumn: 24, endColumn: 25}
(anonymous) @ index.ts:515
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
rejected @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
(anonymous) @ index.ts:1
__awaiter @ index.ts:1
compileTest @ index.ts:505
(anonymous) @ index.ts:532
await in (anonymous)(异步)
__webpack_require__.a @ async module:49
./src/index.ts @ error.ts:32
__webpack_require__ @ bootstrap:24
(anonymous) @ startup:6
(anonymous) @ startup:6
index.ts:524  SyntaxError {message: "Expected ']'", line: 1, startColumn: 24, endColumn: 25}
(anonymous) @ index.ts:524
rejected @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
rejected @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
(anonymous) @ index.ts:1
__awaiter @ index.ts:1
compileTest @ index.ts:505
(anonymous) @ index.ts:532
await in (anonymous)(异步)
__webpack_require__.a @ async module:49
./src/index.ts @ error.ts:32
__webpack_require__ @ bootstrap:24
(anonymous) @ startup:6
(anonymous) @ startup:6
index.ts:507 24
index.ts:508 DECLARE i: INTEGER
DECLARE j: INTEGER

DECLARE sum: INTEGER

FOR i <- 0 TO 10
    FOR j <- 0 TO 10
        sum <- sum + i + j
    NEXT j
NEXT i

OUTPUT sum

compiler.ts:21 (38) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(5)}
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (global $sum (mut i32) (i32.const 0))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (global.set $sum
   (i32.const 0)
  )
  (block
   (global.set $i
    (i32.const 0)
   )
   (loop $2
    (if
     (i32.ge_s
      (i32.const 10)
      (global.get $i)
     )
     (block
      (block
       (global.set $j
        (i32.const 0)
       )
       (loop $1
        (if
         (i32.ge_s
          (i32.const 10)
          (global.get $j)
         )
         (block
          (global.set $sum
           (i32.add
            (i32.add
             (global.get $sum)
             (global.get $i)
            )
            (global.get $j)
           )
          )
          (global.set $j
           (i32.add
            (global.get $j)
            (i32.const 1)
           )
          )
          (br $1)
         )
        )
       )
      )
      (global.set $i
       (i32.add
        (global.get $i)
        (i32.const 1)
       )
      )
      (br $2)
     )
    )
   )
  )
  (call $logInteger
   (global.get $sum)
  )
 )
)

compiler.ts:89 1210
index.ts:507 25
index.ts:508 OUTPUT "Hello World"
compiler.ts:21 (3) [Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(1)}
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (data $0 (i32.const 0) "Hello World\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (call $logString
   (i32.const 0)
  )
 )
)

compiler.ts:104 Hello World
index.ts:507 26
index.ts:508 DECLARE i: ARRAY[0: 1] OF INTEGER

i[0] <- 2147483647
OUTPUT i[0]

compiler.ts:21 (23) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(3)}
generator.ts:145 0
generator.ts:145 0
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (global.set $i
   (i32.const 0)
  )
  (i32.store align=1
   (i32.add
    (global.get $i)
    (i32.mul
     (i32.const 0)
     (i32.const 4)
    )
   )
   (i32.const 2147483647)
  )
  (call $logInteger
   (i32.load align=1
    (i32.add
     (global.get $i)
     (i32.mul
      (i32.const 0)
      (i32.const 4)
     )
    )
   )
  )
 )
)

 2147483647
 27
 DECLARE i: ARRAY[0: 2] OF INTEGER

i[0] <- 2147483647
i[1] <- -2147483648
OUTPUT i[0] + i[1]

 (35) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(4)}
 0
generator.ts:145 0
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (global.set $i
   (i32.const 0)
  )
  (i32.store align=1
   (i32.add
    (global.get $i)
    (i32.mul
     (i32.const 0)
     (i32.const 4)
    )
   )
   (i32.const 2147483647)
  )
  (i32.store align=1
   (i32.add
    (global.get $i)
    (i32.mul
     (i32.const 1)
     (i32.const 4)
    )
   )
   (i32.sub
    (i32.const 0)
    (i32.const -2147483648)
   )
  )
  (call $logInteger
   (i32.add
    (i32.load align=1
     (i32.add
      (global.get $i)
      (i32.mul
       (i32.const 0)
       (i32.const 4)
      )
     )
    )
    (i32.load align=1
     (i32.add
      (global.get $i)
      (i32.mul
       (i32.const 1)
       (i32.const 4)
      )
     )
    )
   )
  )
 )
)

compiler.ts:89 -1
index.ts:507 28
index.ts:508 DECLARE i: STRING
DECLARE j: STRING

i <- "Hello"
j <- "World"

OUTPUT i & j

index.ts:515  SyntaxError {message: 'Expected expression.', line: 7, startColumn: 9, endColumn: 10}
(anonymous) @ index.ts:515
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
rejected @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
rejected @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
(anonymous) @ index.ts:1
__awaiter @ index.ts:1
compileTest @ index.ts:505
(anonymous) @ index.ts:532
await in (anonymous)(异步)
__webpack_require__.a @ async module:49
./src/index.ts @ error.ts:32
__webpack_require__ @ bootstrap:24
(anonymous) @ startup:6
(anonymous) @ startup:6
index.ts:524  SyntaxError {message: 'Expected expression.', line: 7, startColumn: 9, endColumn: 10}
(anonymous) @ index.ts:524
rejected @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
rejected @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
rejected @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
(anonymous) @ index.ts:1
__awaiter @ index.ts:1
compileTest @ index.ts:505
(anonymous) @ index.ts:532
await in (anonymous)(异步)
__webpack_require__.a @ async module:49
./src/index.ts @ error.ts:32
__webpack_require__ @ bootstrap:24
(anonymous) @ startup:6
(anonymous) @ startup:6
index.ts:507 29
index.ts:508 IF 3 THEN
    OUTPUT 2
ENDIF

compiler.ts:21 (7) [Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(1)}
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (if
   (i32.const 3)
   (call $logInteger
    (i32.const 2)
   )
  )
 )
)

compiler.ts:89 2
index.ts:507 30
index.ts:508 DECLARE i: ARRAY[0: 10] OF STRING

i[0] <- "nihao"

OUTPUT i[0]

compiler.ts:21 (23) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(3)}
generator.ts:145 0
generator.ts:145 0
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (data $0 (i32.const 40) "nihao\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (global.set $i
   (i32.const 0)
  )
  (i32.store align=1
   (i32.add
    (global.get $i)
    (i32.mul
     (i32.const 0)
     (i32.const 4)
    )
   )
   (i32.const 40)
  )
  (call $logString
   (i32.load align=1
    (i32.add
     (global.get $i)
     (i32.mul
      (i32.const 0)
      (i32.const 4)
     )
    )
   )
  )
 )
)

compiler.ts:104 nihao
index.ts:507 31
index.ts:508 OUTPUT "编码测试"
compiler.ts:21 (3) [Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(1)}
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (data $0 (i32.const 0) "\e7\bc\96\e7\a0\81\e6\b5\8b\e8\af\95\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (call $logString
   (i32.const 0)
  )
 )
)

compiler.ts:104 编码测试
index.ts:507 32
index.ts:508 DECLARE arr: ARRAY[0: 9] OF REAL
DECLARE i: INTEGER

FOR i <- 0 TO 9
    // i / 10 makes an integer value
    arr[i] <- i + i / 10.0
NEXT i

DECLARE sum: REAL

FOR i <- 0 TO 9
    sum <- sum + arr[i]
NEXT i

OUTPUT sum

compiler.ts:21 (56) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(6)}
generator.ts:145 0
generator.ts:145 0
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $arr (mut i32) (i32.const 0))
 (global $i (mut i32) (i32.const 0))
 (global $sum (mut f64) (f64.const 0))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (global.set $arr
   (i32.const 0)
  )
  (global.set $i
   (i32.const 0)
  )
  (block
   (global.set $i
    (i32.const 0)
   )
   (loop $1
    (if
     (i32.ge_s
      (i32.const 9)
      (global.get $i)
     )
     (block
      (f64.store align=1
       (i32.add
        (global.get $arr)
        (i32.mul
         (global.get $i)
         (i32.const 8)
        )
       )
       (f64.add
        (f64.convert_i32_s
         (global.get $i)
        )
        (f64.div
         (f64.convert_i32_s
          (global.get $i)
         )
         (f64.const 10)
        )
       )
      )
      (global.set $i
       (i32.add
        (global.get $i)
        (i32.const 1)
       )
      )
      (br $1)
     )
    )
   )
  )
  (global.set $sum
   (f64.const 0)
  )
  (block
   (global.set $i
    (i32.const 0)
   )
   (loop $2
    (if
     (i32.ge_s
      (i32.const 9)
      (global.get $i)
     )
     (block
      (global.set $sum
       (f64.add
        (global.get $sum)
        (f64.load align=1
         (i32.add
          (global.get $arr)
          (i32.mul
           (global.get $i)
           (i32.const 8)
          )
         )
        )
       )
      )
      (global.set $i
       (i32.add
        (global.get $i)
        (i32.const 1)
       )
      )
      (br $2)
     )
    )
   )
  )
  (call $logReal
   (global.get $sum)
  )
 )
)

compiler.ts:93 49.5
index.ts:507 33
index.ts:508 OUTPUT 1.0 / 20
compiler.ts:21 (5) [Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(1)}
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (call $logReal
   (f64.div
    (f64.const 1)
    (f64.convert_i32_s
     (i32.const 20)
    )
   )
  )
 )
)

compiler.ts:93 0.05
index.ts:507 34
index.ts:508 OUTPUT 1 / 20
compiler.ts:21 (5) [Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(1)}
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (call $logInteger
   (i32.div_s
    (i32.const 1)
    (i32.const 20)
   )
  )
 )
)

compiler.ts:89 0
index.ts:507 35
index.ts:508 FUNCTION print() RETURNS STRING
    DECLARE str: STRING
    str <- "Hi"
    RETURN str
ENDFUNCTION

OUTPUT print()

compiler.ts:21 (21) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(2)}
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (data $0 (i32.const 0) "Hi\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $print (result i32)
  (local $0 i32)
  (local.set $0
   (i32.const 0)
  )
  (local.set $0
   (i32.const 0)
  )
  (return
   (local.get $0)
  )
 )
 (func $__main
  (call $logString
   (call $print)
  )
 )
)

compiler.ts:104 Hi
index.ts:507 36
index.ts:508 PROCEDURE print()
    DECLARE str: STRING
    str <- "Hi"
    OUTPUT str
ENDPROCEDURE

CALL print()

compiler.ts:21 (19) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(2)}
procedure.ts:685 str BasicType {kind: 'BASIC', type: 'STRING'} 0 2
procedure.ts:685 str BasicType {kind: 'BASIC', type: 'STRING'} 0 2
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_none (func))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (data $0 (i32.const 0) "Hi\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $print
  (local $0 i32)
  (local.set $0
   (i32.const 0)
  )
  (local.set $0
   (i32.const 0)
  )
  (call $logString
   (local.get $0)
  )
  (return)
 )
 (func $__main
  (call $print)
 )
)

compiler.ts:104 Hi
index.ts:507 37
index.ts:508 FUNCTION sum() RETURNS INTEGER
    DECLARE sum: INTEGER
    DECLARE arr: ARRAY[0: 10] OF INTEGER
    DECLARE i: INTEGER
    FOR i <- 0 TO 10
        arr[i] <- i
    NEXT i
    
    FOR i <- 0 TO 10
        sum <- sum + arr[i]
    NEXT i
    RETURN sum
ENDFUNCTION

OUTPUT sum()

compiler.ts:21 (63) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(2)}
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $sum (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $0
   (i32.const 0)
  )
  (local.set $1
   (i32.const 0)
  )
  (local.set $2
   (i32.const 0)
  )
  (block
   (local.set $2
    (i32.const 0)
   )
   (loop $1
    (if
     (i32.ge_s
      (i32.const 10)
      (local.get $2)
     )
     (block
      (i32.store align=1
       (i32.add
        (local.get $1)
        (i32.mul
         (local.get $2)
         (i32.const 4)
        )
       )
       (local.get $2)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
      (br $1)
     )
    )
   )
  )
  (block
   (local.set $2
    (i32.const 0)
   )
   (loop $2
    (if
     (i32.ge_s
      (i32.const 10)
      (local.get $2)
     )
     (block
      (local.set $0
       (i32.add
        (local.get $0)
        (i32.load align=1
         (i32.add
          (local.get $1)
          (i32.mul
           (local.get $2)
           (i32.const 4)
          )
         )
        )
       )
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
      (br $2)
     )
    )
   )
  )
  (return
   (local.get $0)
  )
 )
 (func $__main
  (call $logInteger
   (call $sum)
  )
 )
)

compiler.ts:89 55
index.ts:507 38
index.ts:508 FUNCTION sum(arr: ARRAY) RETURNS INTEGER
    DECLARE sum: INTEGER
    DECLARE i: INTEGER

    FOR i <- 0 TO 10
        sum <- sum + arr[i]
    NEXT i
    RETURN sum
ENDFUNCTION

DECLARE arr: ARRAY[0: 10] OF INTEGER
DECLARE i: INTEGER
FOR i <- 0 TO 10
    arr[i] <- i
NEXT i

OUTPUT sum(arr)

compiler.ts:21 (71) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(5)}
index.ts:515  RuntimeError {msg: "Unknown type 'ARRAY'"}
(anonymous) @ index.ts:515
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
rejected @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
rejected @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
rejected @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
index.ts:524  RuntimeError {msg: "Unknown type 'ARRAY'"}
(anonymous) @ index.ts:524
rejected @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
rejected @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
rejected @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
rejected @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
Promise.then(异步)
step @ index.ts:1
fulfilled @ index.ts:1
index.ts:507 39
index.ts:508 PROCEDURE print(str: STRING)
    OUTPUT str
ENDPROCEDURE

CALL print("procedure")

compiler.ts:21 (16) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(2)}
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (data $0 (i32.const 0) "procedure\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $print (param $0 i32)
  (call $logString
   (local.get $0)
  )
  (return)
 )
 (func $__main
  (call $print
   (i32.const 0)
  )
 )
)

compiler.ts:104 procedure
index.ts:507 40
index.ts:508 OUTPUT LENGTH("Happy Days")
compiler.ts:21 (6) [Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(1)}
compiler.ts:76 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (data $0 (i32.const 0) "Happy Days\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (local.get $0)
  )
  (loop $1
   (if
    (i32.ne
     (i32.load8_u
      (local.get $1)
     )
     (i32.const 0)
    )
    (block
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $1)
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $__main
  (call $logInteger
   (call $LENGTH
    (i32.const 0)
   )
  )
 )
)

compiler.ts:89 10
index.ts:540 compileCount: 37/41
index.ts:541 compileFailed: 13,23,28,38
index.ts:542 runCount: 37/41
index.ts:543 runFailed: 13,23,28,38
