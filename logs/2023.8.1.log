Error with Permissions-Policy header: Origin trial controlled feature not enabled: 'browsing-topics'.
content_scripts.js:1 今天您打开了 10 次 localhost:8080，花费了 32 分 56 秒 来浏览它。
content_scripts.js:1 你可以在【网费很贵】的选项中关闭以上提示！
index.js:485 [webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.
log.js:39 [HMR] Waiting for update signal from WDS...
index.ts:235 0
index.ts:236 OUTPUT 1 + 9

compiler.ts:18 (5) [Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(1)}
compiler.ts:18 (5) [Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(1)}
compiler.ts:69 (module
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logNumber" (func $logNumber (param f64)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $main))
 (start $main)
 (func $main
  (call $logNumber
   (f64.add
    (f64.const 1)
    (f64.const 9)
   )
  )
 )
)

 10
 1
 DECLARE i:INTEGER
DECLARE j:INTEGER
DECLARE k:REAL

i <- 1
j <- 2
k <- 3.14
OUTPUT i + j * k

 (28) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(7)}
 (28) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(7)}
 (module
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logNumber" (func $logNumber (param f64)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (global $k (mut f64) (f64.const 0))
 (export "main" (func $main))
 (start $main)
 (func $main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (global.set $k
   (f64.const 0)
  )
  (global.set $i
   (i32.trunc_f64_s
    (f64.const 1)
   )
  )
  (global.set $j
   (i32.trunc_f64_s
    (f64.const 2)
   )
  )
  (global.set $k
   (f64.const 3.14)
  )
  (call $logNumber
   (f64.add
    (f64.convert_i32_s
     (global.get $i)
    )
    (f64.mul
     (f64.convert_i32_s
      (global.get $j)
     )
     (global.get $k)
    )
   )
  )
 )
)

 7.28
 2
 DECLARE i:INTEGER
DECLARE j:INTEGER

i <- -1.99
j <- 2.99
IF i = j + i THEN
    OUTPUT 1
ELSE
    OUTPUT 2
ENDIF

 (29) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (29) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (module
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logNumber" (func $logNumber (param f64)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (global.set $i
   (i32.trunc_f64_s
    (f64.neg
     (f64.const 1.99)
    )
   )
  )
  (global.set $j
   (i32.trunc_f64_s
    (f64.const 2.99)
   )
  )
  (if
   (f64.eq
    (f64.convert_i32_s
     (global.get $i)
    )
    (f64.add
     (f64.convert_i32_s
      (global.get $j)
     )
     (f64.convert_i32_s
      (global.get $i)
     )
    )
   )
   (call $logNumber
    (f64.const 1)
   )
   (call $logNumber
    (f64.const 2)
   )
  )
 )
)

 2
 3
 DECLARE i:STRING
i <- "Hi"
OUTPUT i

 (10) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3)}
 
 (10) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3)}
 
 4
 DECLARE i:INTEGER
DECLARE j:INTEGER

i <- 1
WHILE i < 10
    i <- i + 1
    j <- i
ENDWHILE

OUTPUT j

 (27) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (27) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (module
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logNumber" (func $logNumber (param f64)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (global.set $i
   (i32.trunc_f64_s
    (f64.const 1)
   )
  )
  (loop $1
   (if
    (f64.lt
     (f64.convert_i32_s
      (global.get $i)
     )
     (f64.const 10)
    )
    (block
     (global.set $i
      (i32.trunc_f64_s
       (f64.add
        (f64.convert_i32_s
         (global.get $i)
        )
        (f64.const 1)
       )
      )
     )
     (global.set $j
      (i32.trunc_f64_s
       (f64.convert_i32_s
        (global.get $i)
       )
      )
     )
     (br $1)
    )
   )
  )
  (call $logNumber
   (f64.convert_i32_s
    (global.get $j)
   )
  )
 )
)

 10
 5
 DECLARE i:INTEGER
DECLARE j:INTEGER

i <- 1
REPEAT
    i <- i + 1
    j <- i
UNTIL i = 10

OUTPUT j

 (27) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (27) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (module
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logNumber" (func $logNumber (param f64)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (global.set $i
   (i32.trunc_f64_s
    (f64.const 1)
   )
  )
  (loop $1
   (global.set $i
    (i32.trunc_f64_s
     (f64.add
      (f64.convert_i32_s
       (global.get $i)
      )
      (f64.const 1)
     )
    )
   )
   (global.set $j
    (i32.trunc_f64_s
     (f64.convert_i32_s
      (global.get $i)
     )
    )
   )
   (if
    (i32.eqz
     (f64.eq
      (f64.convert_i32_s
       (global.get $i)
      )
      (f64.const 10)
     )
    )
    (br $1)
   )
  )
  (call $logNumber
   (f64.convert_i32_s
    (global.get $j)
   )
  )
 )
)

 10
 6
 DECLARE i:INTEGER
DECLARE j:INTEGER

FOR i <- 1 TO 11
    j <- i
NEXT i

OUTPUT j

 (22) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(4)}
 (22) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(4)}
 (module
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logNumber" (func $logNumber (param f64)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (block
   (global.set $i
    (i32.trunc_f64_s
     (f64.const 1)
    )
   )
   (loop $1
    (if
     (f64.ge
      (f64.const 11)
      (f64.convert_i32_s
       (global.get $i)
      )
     )
     (block
      (global.set $j
       (i32.trunc_f64_s
        (f64.convert_i32_s
         (global.get $i)
        )
       )
      )
      (global.set $i
       (i32.add
        (global.get $i)
        (i32.trunc_f64_s
         (f64.const 1)
        )
       )
      )
      (br $1)
     )
    )
   )
  )
  (call $logNumber
   (f64.convert_i32_s
    (global.get $j)
   )
  )
 )
)

 11
 7
 FUNCTION add(a:INTEGER, b:INTEGER) RETURNS INTEGER
    RETURN a + b
ENDFUNCTION

DECLARE i:INTEGER
DECLARE j:INTEGER

i <- 1
j <- 2
OUTPUT add(i, j)

 (40) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(6)}
 (40) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(6)}
 (module
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_none (func (param i32)))
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logNumber" (func $logNumber (param f64)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $add (param $0 i32) (param $1 i32) (result i32)
  (return
   (i32.trunc_f64_s
    (f64.add
     (f64.convert_i32_s
      (local.get $0)
     )
     (f64.convert_i32_s
      (local.get $1)
     )
    )
   )
  )
 )
 (func $main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (global.set $i
   (i32.trunc_f64_s
    (f64.const 1)
   )
  )
  (global.set $j
   (i32.trunc_f64_s
    (f64.const 2)
   )
  )
  (call $logNumber
   (f64.convert_i32_s
    (call $add
     (i32.trunc_f64_s
      (f64.convert_i32_s
       (global.get $i)
      )
     )
     (i32.trunc_f64_s
      (f64.convert_i32_s
       (global.get $j)
      )
     )
    )
   )
  )
 )
)

compiler.ts:79 3
index.ts:235 8
index.ts:236 FUNCTION for(a:INTEGER) RETURNS INTEGER
    DECLARE b:INTEGER
    DECLARE c:INTEGER

    FOR b <- 1 TO a
        c <- b
    NEXT b
    RETURN c
ENDFUNCTION

OUTPUT for(10)

compiler.ts:18 (37) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(2)}
compiler.ts:18 (37) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(2)}
compiler.ts:69 (module
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_none (func (param i32)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logNumber" (func $logNumber (param f64)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $main))
 (start $main)
 (func $for (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (i32.const 0)
  )
  (local.set $2
   (i32.const 0)
  )
  (block
   (local.set $1
    (i32.trunc_f64_s
     (f64.const 1)
    )
   )
   (loop $1
    (if
     (f64.ge
      (f64.convert_i32_s
       (local.get $0)
      )
      (f64.convert_i32_s
       (local.get $1)
      )
     )
     (block
      (local.set $2
       (i32.trunc_f64_s
        (f64.convert_i32_s
         (local.get $1)
        )
       )
      )
      (local.set $1
       (i32.add
        (local.get $1)
        (i32.trunc_f64_s
         (f64.const 1)
        )
       )
      )
      (br $1)
     )
    )
   )
  )
  (return
   (i32.trunc_f64_s
    (f64.convert_i32_s
     (local.get $2)
    )
   )
  )
 )
 (func $main
  (call $logNumber
   (f64.convert_i32_s
    (call $for
     (i32.trunc_f64_s
      (f64.const 10)
     )
    )
   )
  )
 )
)

compiler.ts:79 10
index.ts:235 9
index.ts:236 FUNCTION for(a:INTEGER) RETURNS INTEGER
    DECLARE b:INTEGER

    FOR a <- 1 TO 11
        b <- a
    NEXT a
    RETURN b
ENDFUNCTION

OUTPUT for(1)

compiler.ts:18 (33) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(2)}
compiler.ts:18 (33) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(2)}
compiler.ts:69 (module
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_none (func (param i32)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logNumber" (func $logNumber (param f64)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $main))
 (start $main)
 (func $for (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (i32.const 0)
  )
  (block
   (local.set $0
    (i32.trunc_f64_s
     (f64.const 1)
    )
   )
   (loop $1
    (if
     (f64.ge
      (f64.const 11)
      (f64.convert_i32_s
       (local.get $0)
      )
     )
     (block
      (local.set $1
       (i32.trunc_f64_s
        (f64.convert_i32_s
         (local.get $0)
        )
       )
      )
      (local.set $0
       (i32.add
        (local.get $0)
        (i32.trunc_f64_s
         (f64.const 1)
        )
       )
      )
      (br $1)
     )
    )
   )
  )
  (return
   (i32.trunc_f64_s
    (f64.convert_i32_s
     (local.get $1)
    )
   )
  )
 )
 (func $main
  (call $logNumber
   (f64.convert_i32_s
    (call $for
     (i32.trunc_f64_s
      (f64.const 1)
     )
    )
   )
  )
 )
)

compiler.ts:79 11
index.ts:235 10
index.ts:236 FUNCTION recur(a:INTEGER) RETURNS INTEGER
    IF a = 10 THEN
        RETURN a
    ENDIF
    RETURN recur(a + 1)
ENDFUNCTION

OUTPUT recur(1)

compiler.ts:18 (31) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(2)}
compiler.ts:18 (31) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(2)}
compiler.ts:69 (module
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_none (func (param i32)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logNumber" (func $logNumber (param f64)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $main))
 (start $main)
 (func $recur (param $0 i32) (result i32)
  (if
   (f64.eq
    (f64.convert_i32_s
     (local.get $0)
    )
    (f64.const 10)
   )
   (return
    (i32.trunc_f64_s
     (f64.convert_i32_s
      (local.get $0)
     )
    )
   )
  )
  (return
   (i32.trunc_f64_s
    (f64.convert_i32_s
     (call $recur
      (i32.trunc_f64_s
       (f64.add
        (f64.convert_i32_s
         (local.get $0)
        )
        (f64.const 1)
       )
      )
     )
    )
   )
  )
 )
 (func $main
  (call $logNumber
   (f64.convert_i32_s
    (call $recur
     (i32.trunc_f64_s
      (f64.const 1)
     )
    )
   )
  )
 )
)

compiler.ts:79 10
index.ts:235 11
index.ts:236 DECLARE a:INTEGER
a <- 1

FUNCTION scope() RETURNS INTEGER
    DECLARE b:INTEGER
    DECLARE c:INTEGER

    b <- 1
    c <- 2
    RETURN a + b + c
ENDFUNCTION

OUTPUT scope()

compiler.ts:18 (39) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(4)}
compiler.ts:18 (39) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(4)}
compiler.ts:69 (module
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logNumber" (func $logNumber (param f64)))
 (import "env" "logString" (func $logString (param i32)))
 (global $a (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $scope (result i32)
  (local $0 i32)
  (local $1 i32)
  (local.set $0
   (i32.const 0)
  )
  (local.set $1
   (i32.const 0)
  )
  (local.set $0
   (i32.trunc_f64_s
    (f64.const 1)
   )
  )
  (local.set $1
   (i32.trunc_f64_s
    (f64.const 2)
   )
  )
  (return
   (i32.trunc_f64_s
    (f64.add
     (f64.add
      (f64.convert_i32_s
       (global.get $a)
      )
      (f64.convert_i32_s
       (local.get $0)
      )
     )
     (f64.convert_i32_s
      (local.get $1)
     )
    )
   )
  )
 )
 (func $main
  (global.set $a
   (i32.const 0)
  )
  (global.set $a
   (i32.trunc_f64_s
    (f64.const 1)
   )
  )
  (call $logNumber
   (f64.convert_i32_s
    (call $scope)
   )
  )
 )
)

compiler.ts:79 4
index.ts:235 12
index.ts:236 PROCEDURE print(a:INTEGER)
    DECLARE b:INTEGER
    DECLARE c:INTEGER

    b <- 2
    c <- 2
    OUTPUT a + b + c
ENDPROCEDURE

CALL print(1)

compiler.ts:18 (34) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(2)}
compiler.ts:18 (34) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(2)}
compiler.ts:69 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logNumber" (func $logNumber (param f64)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $main))
 (start $main)
 (func $print (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (i32.const 0)
  )
  (local.set $2
   (i32.const 0)
  )
  (local.set $1
   (i32.trunc_f64_s
    (f64.const 2)
   )
  )
  (local.set $2
   (i32.trunc_f64_s
    (f64.const 2)
   )
  )
  (call $logNumber
   (f64.add
    (f64.add
     (f64.convert_i32_s
      (local.get $0)
     )
     (f64.convert_i32_s
      (local.get $1)
     )
    )
    (f64.convert_i32_s
     (local.get $2)
    )
   )
  )
  (return)
 )
 (func $main
  (call $print
   (i32.trunc_f64_s
    (f64.const 1)
   )
  )
 )
)

compiler.ts:79 5
index.ts:235 13
index.ts:236 DECLARE i: INTEGER
i <- 1

PROCEDURE increment(BYREF a:INTEGER)
    a <- a + 1
ENDPROCEDURE

CALL increment(i)
OUTPUT i

compiler.ts:18 (29) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(5)}
compiler.ts:18 (29) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(5)}
compiler.ts:69 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logNumber" (func $logNumber (param f64)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $increment (param $0 i32)
  (local.set $0
   (i32.trunc_f64_s
    (f64.add
     (f64.convert_i32_s
      (local.get $0)
     )
     (f64.const 1)
    )
   )
  )
  (return)
 )
 (func $main
  (global.set $i
   (i32.const 0)
  )
  (global.set $i
   (i32.trunc_f64_s
    (f64.const 1)
   )
  )
  (call $increment
   (i32.trunc_f64_s
    (f64.convert_i32_s
     (global.get $i)
    )
   )
  )
  (call $logNumber
   (f64.convert_i32_s
    (global.get $i)
   )
  )
 )
)

compiler.ts:79 1
index.ts:235 14
index.ts:236 DECLARE i: INTEGER
i <- 1

PROCEDURE increment()
    i <- i + 1
ENDPROCEDURE

CALL increment()
OUTPUT i

compiler.ts:18 (24) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(5)}
compiler.ts:18 (24) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(5)}
compiler.ts:69 (module
 (type $none_=>_none (func))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_none (func (param i32)))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logNumber" (func $logNumber (param f64)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $increment
  (global.set $i
   (i32.trunc_f64_s
    (f64.add
     (f64.convert_i32_s
      (global.get $i)
     )
     (f64.const 1)
    )
   )
  )
  (return)
 )
 (func $main
  (global.set $i
   (i32.const 0)
  )
  (global.set $i
   (i32.trunc_f64_s
    (f64.const 1)
   )
  )
  (call $increment)
  (call $logNumber
   (f64.convert_i32_s
    (global.get $i)
   )
  )
 )
)

compiler.ts:79 2
index.ts:235 15
index.ts:236 FUNCTION add(a:REAL, b:REAL) RETURNS REAL
    DECLARE c: REAL
    c <- a + b
    RETURN c
ENDFUNCTION

DECLARE i: REAL
DECLARE j: REAL

i <- 1.1
j <- 2.2
OUTPUT add(i, j)

compiler.ts:18 (47) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(6)}
compiler.ts:18 (47) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(6)}
compiler.ts:69 (module
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_none (func (param i32)))
 (type $f64_f64_=>_f64 (func (param f64 f64) (result f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logNumber" (func $logNumber (param f64)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut f64) (f64.const 0))
 (global $j (mut f64) (f64.const 0))
 (export "main" (func $main))
 (start $main)
 (func $add (param $0 f64) (param $1 f64) (result f64)
  (local $2 f64)
  (local.set $2
   (f64.const 0)
  )
  (local.set $2
   (f64.add
    (local.get $0)
    (local.get $1)
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $main
  (global.set $i
   (f64.const 0)
  )
  (global.set $j
   (f64.const 0)
  )
  (global.set $i
   (f64.const 1.1)
  )
  (global.set $j
   (f64.const 2.2)
  )
  (call $logNumber
   (call $add
    (global.get $i)
    (global.get $j)
   )
  )
 )
)

compiler.ts:79 3.3000000000000003
index.ts:235 16
index.ts:236 OUTPUT 'a'
compiler.ts:18 (3) [Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(1)}
compiler.ts:18 (3) [Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(1)}
compiler.ts:69 (module
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logNumber" (func $logNumber (param f64)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $main))
 (start $main)
 (func $main
  (call $logNumber
   (i32.const 97)
  )
 )
)

index.ts:255 CompileError: WebAssembly.instantiate(): Compiling function #2 failed: call[0] expected type f64, found i32.const of type i32 @+99
index.ts:235 17
index.ts:236 DECLARE i: CHAR
i <- 'v'

OUTPUT i

compiler.ts:18 (10) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(3)}
compiler.ts:18 (10) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:21 ProgramNode {kind: 0, body: Array(3)}
compiler.ts:69 (module
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logNumber" (func $logNumber (param f64)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $main
  (global.set $i
   (i32.const 0)
  )
  (global.set $i
   (i32.trunc_f64_s
    (i32.const 118)
   )
  )
  (call $logNumber
   (f64.convert_i32_s
    (global.get $i)
   )
  )
 )
)

index.ts:255 CompileError: WebAssembly.instantiate(): Compiling function #2 failed: i32.trunc_f64_s[0] expected type f64, found i32.const of type i32 @+111
index.ts:272 compileCount: 17/18
index.ts:273 compileFailed: 3
index.ts:274 runCount: 14/18
index.ts:275 runFailed: 3,13,16,17