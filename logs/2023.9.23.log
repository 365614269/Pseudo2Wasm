 今天您打开了 1 次 localhost:8080，花费了 0 秒 来浏览它。
 你可以在【网费很贵】的选项中关闭以上提示！
 [webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.
 [HMR] Waiting for update signal from WDS...
:8080/favicon.ico:1   Failed to load resource: the server responded with a status of 404 (Not Found)
 0
 OUTPUT 1 + 9

 Array(5)
 ProgramNode
 Array(5)
 ProgramNode
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $main))
 (start $main)
 (func $main
  (call $logInteger
   (i32.add
    (i32.const 1)
    (i32.const 9)
   )
  )
 )
)

 Uint8Array(136)
 10
 1
 DECLARE i:INTEGER
DECLARE j:INTEGER
DECLARE k:REAL

i <- 1
j <- 2
k <- 3.14
OUTPUT i + j * k

 Array(28)
 ProgramNode
 Array(28)
 ProgramNode
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (global $k (mut f64) (f64.const 0))
 (export "main" (func $main))
 (start $main)
 (func $main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (global.set $k
   (f64.const 0)
  )
  (global.set $i
   (i32.const 1)
  )
  (global.set $j
   (i32.const 2)
  )
  (global.set $k
   (f64.const 3.14)
  )
  (call $logReal
   (f64.add
    (f64.convert_i32_s
     (global.get $i)
    )
    (f64.mul
     (f64.convert_i32_s
      (global.get $j)
     )
     (global.get $k)
    )
   )
  )
 )
)

 Uint8Array(204)
 7.28
 2
 DECLARE i:INTEGER
DECLARE j:INTEGER

i <- -1.99
j <- 2.99
IF i = j + i THEN
    OUTPUT 1
ELSE
    OUTPUT 2
ENDIF

 Array(29)
 ProgramNode
 Array(29)
 ProgramNode
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (global.set $i
   (i32.trunc_f64_s
    (f64.neg
     (f64.const 1.99)
    )
   )
  )
  (global.set $j
   (i32.trunc_f64_s
    (f64.const 2.99)
   )
  )
  (if
   (i32.eq
    (global.get $i)
    (i32.add
     (global.get $j)
     (global.get $i)
    )
   )
   (call $logInteger
    (i32.const 1)
   )
   (call $logInteger
    (i32.const 2)
   )
  )
 )
)

 Uint8Array(195)
 2
 3
 DECLARE i:STRING
i <- "Hi"
OUTPUT i

 Array(10)
 ProgramNode
  RuntimeError
(anonymous) @ bundle.js:3974
 Array(10)
 ProgramNode
  RuntimeError
(anonymous) @ bundle.js:3985
 4
 DECLARE i:INTEGER
DECLARE j:INTEGER

i <- 1
WHILE i < 10
    i <- i + 1
    j <- i
ENDWHILE

OUTPUT j

 Array(27)
 ProgramNode
 Array(27)
 ProgramNode
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (global.set $i
   (i32.const 1)
  )
  (loop $1
   (if
    (i32.lt_s
     (global.get $i)
     (i32.const 10)
    )
    (block
     (global.set $i
      (i32.add
       (global.get $i)
       (i32.const 1)
      )
     )
     (global.set $j
      (global.get $i)
     )
     (br $1)
    )
   )
  )
  (call $logInteger
   (global.get $j)
  )
 )
)

 Uint8Array(182)
 10
 5
 DECLARE i:INTEGER
DECLARE j:INTEGER

i <- 1
REPEAT
    i <- i + 1
    j <- i
UNTIL i = 10

OUTPUT j

 Array(27)
 ProgramNode
 Array(27)
 ProgramNode
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (global.set $i
   (i32.const 1)
  )
  (loop $1
   (global.set $i
    (i32.add
     (global.get $i)
     (i32.const 1)
    )
   )
   (global.set $j
    (global.get $i)
   )
   (if
    (i32.eqz
     (i32.eq
      (global.get $i)
      (i32.const 10)
     )
    )
    (br $1)
   )
  )
  (call $logInteger
   (global.get $j)
  )
 )
)

 Uint8Array(183)
 10
 6
 DECLARE i:INTEGER
DECLARE j:INTEGER

FOR i <- 1 TO 11
    j <- i
NEXT i

OUTPUT j

 Array(22)
 ProgramNode
 Array(22)
 ProgramNode
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (block
   (global.set $i
    (i32.const 1)
   )
   (loop $1
    (if
     (i32.ge_s
      (i32.const 11)
      (global.get $i)
     )
     (block
      (global.set $j
       (global.get $i)
      )
      (global.set $i
       (i32.add
        (global.get $i)
        (i32.const 1)
       )
      )
      (br $1)
     )
    )
   )
  )
  (call $logInteger
   (global.get $j)
  )
 )
)

 Uint8Array(182)
 11
 7
 FUNCTION add(a:INTEGER, b:INTEGER) RETURNS INTEGER
    RETURN a + b
ENDFUNCTION

DECLARE i:INTEGER
DECLARE j:INTEGER

i <- 1
j <- 2
OUTPUT add(i, j)

 Array(40)
 ProgramNode
 Array(40)
 ProgramNode
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $add (param $0 i32) (param $1 i32) (result i32)
  (return
   (i32.add
    (local.get $0)
    (local.get $1)
   )
  )
 )
 (func $main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (global.set $i
   (i32.const 1)
  )
  (global.set $j
   (i32.const 2)
  )
  (call $logInteger
   (call $add
    (global.get $i)
    (global.get $j)
   )
  )
 )
)

 Uint8Array(182)
 3
 8
 FUNCTION for(a:INTEGER) RETURNS INTEGER
    DECLARE b:INTEGER
    DECLARE c:INTEGER

    FOR b <- 1 TO a
        c <- b
    NEXT b
    RETURN c
ENDFUNCTION

OUTPUT for(10)

 Array(37)
 ProgramNode
 Array(37)
 ProgramNode
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $main))
 (start $main)
 (func $for (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (i32.const 0)
  )
  (local.set $2
   (i32.const 0)
  )
  (block
   (local.set $1
    (i32.const 1)
   )
   (loop $1
    (if
     (i32.ge_s
      (local.get $0)
      (local.get $1)
     )
     (block
      (local.set $2
       (local.get $1)
      )
      (local.set $1
       (i32.add
        (local.get $1)
        (i32.const 1)
       )
      )
      (br $1)
     )
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $main
  (call $logInteger
   (call $for
    (i32.const 10)
   )
  )
 )
)

 Uint8Array(185)
 10
 9
 FUNCTION for(a:INTEGER) RETURNS INTEGER
    DECLARE b:INTEGER

    FOR a <- 1 TO 11
        b <- a
    NEXT a
    RETURN b
ENDFUNCTION

OUTPUT for(1)

 Array(33)
 ProgramNode
 Array(33)
 ProgramNode
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $main))
 (start $main)
 (func $for (param $0 i32) (result i32)
  (local $1 i32)
  (local.set $1
   (i32.const 0)
  )
  (block
   (local.set $0
    (i32.const 1)
   )
   (loop $1
    (if
     (i32.ge_s
      (i32.const 11)
      (local.get $0)
     )
     (block
      (local.set $1
       (local.get $0)
      )
      (local.set $0
       (i32.add
        (local.get $0)
        (i32.const 1)
       )
      )
      (br $1)
     )
    )
   )
  )
  (return
   (local.get $1)
  )
 )
 (func $main
  (call $logInteger
   (call $for
    (i32.const 1)
   )
  )
 )
)

 Uint8Array(181)
 11
 10
 FUNCTION recur(a:INTEGER) RETURNS INTEGER
    IF a = 10 THEN
        RETURN a
    ENDIF
    RETURN recur(a + 1)
ENDFUNCTION

OUTPUT recur(1)

 Array(31)
 ProgramNode
 Array(31)
 ProgramNode
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $main))
 (start $main)
 (func $recur (param $0 i32) (result i32)
  (if
   (i32.eq
    (local.get $0)
    (i32.const 10)
   )
   (return
    (local.get $0)
   )
  )
  (return
   (call $recur
    (i32.add
     (local.get $0)
     (i32.const 1)
    )
   )
  )
 )
 (func $main
  (call $logInteger
   (call $recur
    (i32.const 1)
   )
  )
 )
)

 Uint8Array(163)
 10
 11
 DECLARE a:INTEGER
a <- 1

FUNCTION scope() RETURNS INTEGER
    DECLARE b:INTEGER
    DECLARE c:INTEGER

    b <- 1
    c <- 2
    RETURN a + b + c
ENDFUNCTION

OUTPUT scope()

 Array(39)
 ProgramNode
 Array(39)
 ProgramNode
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $a (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $scope (result i32)
  (local $0 i32)
  (local $1 i32)
  (local.set $0
   (i32.const 0)
  )
  (local.set $1
   (i32.const 0)
  )
  (local.set $0
   (i32.const 1)
  )
  (local.set $1
   (i32.const 2)
  )
  (return
   (i32.add
    (i32.add
     (global.get $a)
     (local.get $0)
    )
    (local.get $1)
   )
  )
 )
 (func $main
  (global.set $a
   (i32.const 0)
  )
  (global.set $a
   (i32.const 1)
  )
  (call $logInteger
   (call $scope)
  )
 )
)

 Uint8Array(184)
 4
 12
 PROCEDURE print(a:INTEGER)
    DECLARE b:INTEGER
    DECLARE c:INTEGER

    b <- 2
    c <- 2
    OUTPUT a + b + c
ENDPROCEDURE

CALL print(1)

 Array(34)
 ProgramNode
 Array(34)
 ProgramNode
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $main))
 (start $main)
 (func $print (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (i32.const 0)
  )
  (local.set $2
   (i32.const 0)
  )
  (local.set $1
   (i32.const 2)
  )
  (local.set $2
   (i32.const 2)
  )
  (call $logInteger
   (i32.add
    (i32.add
     (local.get $0)
     (local.get $1)
    )
    (local.get $2)
   )
  )
  (return)
 )
 (func $main
  (call $print
   (i32.const 1)
  )
 )
)

 Uint8Array(166)
 5
 13
 DECLARE i: INTEGER
i <- 1

PROCEDURE increment(BYREF a:INTEGER)
    a <- a + 1
ENDPROCEDURE

CALL increment(i)
OUTPUT i

 Array(29)
 ProgramNode
  
(anonymous) @ bundle.js:3974
 Array(29)
 ProgramNode
  
(anonymous) @ bundle.js:3985
 14
 DECLARE i: INTEGER
i <- 1

PROCEDURE increment()
    i <- i + 1
ENDPROCEDURE

CALL increment()
OUTPUT i

 Array(24)
 ProgramNode
 Array(24)
 ProgramNode
 (module
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_none (func))
 (type $f64_=>_none (func (param f64)))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $increment
  (global.set $i
   (i32.add
    (global.get $i)
    (i32.const 1)
   )
  )
  (return)
 )
 (func $main
  (global.set $i
   (i32.const 0)
  )
  (global.set $i
   (i32.const 1)
  )
  (call $increment)
  (call $logInteger
   (global.get $i)
  )
 )
)

 Uint8Array(163)
 2
 15
 FUNCTION add(a:REAL, b:REAL) RETURNS REAL
    DECLARE c: REAL
    c <- a + b
    RETURN c
ENDFUNCTION

DECLARE i: REAL
DECLARE j: REAL

i <- 1.1
j <- 2.2
OUTPUT add(i, j)

 Array(47)
 ProgramNode
 Array(47)
 ProgramNode
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $f64_f64_=>_f64 (func (param f64 f64) (result f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut f64) (f64.const 0))
 (global $j (mut f64) (f64.const 0))
 (export "main" (func $main))
 (start $main)
 (func $add (param $0 f64) (param $1 f64) (result f64)
  (local $2 f64)
  (local.set $2
   (f64.const 0)
  )
  (local.set $2
   (f64.add
    (local.get $0)
    (local.get $1)
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $main
  (global.set $i
   (f64.const 0)
  )
  (global.set $j
   (f64.const 0)
  )
  (global.set $i
   (f64.const 1.1)
  )
  (global.set $j
   (f64.const 2.2)
  )
  (call $logReal
   (call $add
    (global.get $i)
    (global.get $j)
   )
  )
 )
)

 Uint8Array(241)
 3.3000000000000003
 16
 OUTPUT 'a'
 Array(3)
 ProgramNode
 Array(3)
 ProgramNode
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (export "main" (func $main))
 (start $main)
 (func $main
  (call $logChar
   (i32.const 97)
  )
 )
)

compiler.ts:72 Uint8Array(134)
compiler.ts:90 a
index.ts:332 17
index.ts:333 DECLARE i: CHAR
i <- 'v'

OUTPUT i

compiler.ts:18 Array(10)
compiler.ts:21 ProgramNode
compiler.ts:18 Array(10)
compiler.ts:21 ProgramNode
compiler.ts:70 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $main
  (global.set $i
   (i32.const 0)
  )
  (global.set $i
   (i32.const 118)
  )
  (call $logChar
   (global.get $i)
  )
 )
)

compiler.ts:72 Uint8Array(150)
compiler.ts:90 v
index.ts:332 18
index.ts:333 DECLARE i: INTEGER

i <- 1
OUTPUT -i

compiler.ts:18 Array(11)
compiler.ts:21 ProgramNode
compiler.ts:18 Array(11)
compiler.ts:21 ProgramNode
compiler.ts:70 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $main
  (global.set $i
   (i32.const 0)
  )
  (global.set $i
   (i32.const 1)
  )
  (call $logInteger
   (i32.sub
    (i32.const 0)
    (global.get $i)
   )
  )
 )
)

compiler.ts:72 Uint8Array(152)
compiler.ts:82 -1
index.ts:332 19
index.ts:333 DECLARE i: REAL

i <- 1
OUTPUT -i

compiler.ts:18 Array(11)
compiler.ts:21 ProgramNode
compiler.ts:18 Array(11)
compiler.ts:21 ProgramNode
compiler.ts:70 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut f64) (f64.const 0))
 (export "main" (func $main))
 (start $main)
 (func $main
  (global.set $i
   (f64.const 0)
  )
  (global.set $i
   (f64.convert_i32_s
    (i32.const 1)
   )
  )
  (call $logReal
   (f64.neg
    (global.get $i)
   )
  )
 )
)

compiler.ts:72 Uint8Array(165)
compiler.ts:86 -1
index.ts:332 20
index.ts:333 DECLARE arr: ARRAY[0: 3] OF INTEGER

arr[0] <- 1
arr[1] <- 2
arr[2] <- 3

OUTPUT arr[0] + arr[1] + arr[2]
compiler.ts:18 Array(45)
compiler.ts:21 ProgramNode
generator.ts:124 0
compiler.ts:18 Array(45)
compiler.ts:21 ProgramNode
generator.ts:124 0
compiler.ts:70 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $arr (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $main
  (global.set $arr
   (i32.const 0)
  )
  (i32.store align=2
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 0)
     (i32.const 4)
    )
   )
   (i32.const 1)
  )
  (i32.store align=2
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 1)
     (i32.const 4)
    )
   )
   (i32.const 2)
  )
  (i32.store align=2
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 2)
     (i32.const 4)
    )
   )
   (i32.const 3)
  )
  (call $logInteger
   (i32.add
    (i32.add
     (i32.load align=2
      (i32.add
       (global.get $arr)
       (i32.mul
        (i32.const 0)
        (i32.const 4)
       )
      )
     )
     (i32.load align=2
      (i32.add
       (global.get $arr)
       (i32.mul
        (i32.const 1)
        (i32.const 4)
       )
      )
     )
    )
    (i32.load align=2
     (i32.add
      (global.get $arr)
      (i32.mul
       (i32.const 2)
       (i32.const 4)
      )
     )
    )
   )
  )
 )
)

compiler.ts:72 Uint8Array(217)
compiler.ts:82 6
index.ts:332 21
index.ts:333 DECLARE arr: ARRAY[0: 10] OF INTEGER

arr[0] <- 1
arr[1] <- 2
arr[2] <- 3
arr[3] <- 4
arr[4] <- 5
arr[5] <- 6
arr[6] <- 7
arr[7] <- 8
arr[8] <- 9
arr[9] <- 10

OUTPUT arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]

compiler.ts:18 Array(122)
compiler.ts:21 ProgramNode
generator.ts:124 0
compiler.ts:18 Array(122)
compiler.ts:21 ProgramNode
generator.ts:124 0
compiler.ts:70 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $arr (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $main
  (global.set $arr
   (i32.const 0)
  )
  (i32.store align=2
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 0)
     (i32.const 4)
    )
   )
   (i32.const 1)
  )
  (i32.store align=2
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 1)
     (i32.const 4)
    )
   )
   (i32.const 2)
  )
  (i32.store align=2
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 2)
     (i32.const 4)
    )
   )
   (i32.const 3)
  )
  (i32.store align=2
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 3)
     (i32.const 4)
    )
   )
   (i32.const 4)
  )
  (i32.store align=2
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 4)
     (i32.const 4)
    )
   )
   (i32.const 5)
  )
  (i32.store align=2
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 5)
     (i32.const 4)
    )
   )
   (i32.const 6)
  )
  (i32.store align=2
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 6)
     (i32.const 4)
    )
   )
   (i32.const 7)
  )
  (i32.store align=2
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 7)
     (i32.const 4)
    )
   )
   (i32.const 8)
  )
  (i32.store align=2
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 8)
     (i32.const 4)
    )
   )
   (i32.const 9)
  )
  (i32.store align=2
   (i32.add
    (global.get $arr)
    (i32.mul
     (i32.const 9)
     (i32.const 4)
    )
   )
   (i32.const 10)
  )
  (call $logInteger
   (i32.add
    (i32.add
     (i32.add
      (i32.add
       (i32.add
        (i32.add
         (i32.add
          (i32.add
           (i32.add
            (i32.load align=2
             (i32.add
              (global.get $arr)
              (i32.mul
               (i32.const 0)
               (i32.const 4)
              )
             )
            )
            (i32.load align=2
             (i32.add
              (global.get $arr)
              (i32.mul
               (i32.const 1)
               (i32.const 4)
              )
             )
            )
           )
           (i32.load align=2
            (i32.add
             (global.get $arr)
             (i32.mul
              (i32.const 2)
              (i32.const 4)
             )
            )
           )
          )
          (i32.load align=2
           (i32.add
            (global.get $arr)
            (i32.mul
             (i32.const 3)
             (i32.const 4)
            )
           )
          )
         )
         (i32.load align=2
          (i32.add
           (global.get $arr)
           (i32.mul
            (i32.const 4)
            (i32.const 4)
           )
          )
         )
        )
        (i32.load align=2
         (i32.add
          (global.get $arr)
          (i32.mul
           (i32.const 5)
           (i32.const 4)
          )
         )
        )
       )
       (i32.load align=2
        (i32.add
         (global.get $arr)
         (i32.mul
          (i32.const 6)
          (i32.const 4)
         )
        )
       )
      )
      (i32.load align=2
       (i32.add
        (global.get $arr)
        (i32.mul
         (i32.const 7)
         (i32.const 4)
        )
       )
      )
     )
     (i32.load align=2
      (i32.add
       (global.get $arr)
       (i32.mul
        (i32.const 8)
        (i32.const 4)
       )
      )
     )
    )
    (i32.load align=2
     (i32.add
      (global.get $arr)
      (i32.mul
       (i32.const 9)
       (i32.const 4)
      )
     )
    )
   )
  )
 )
)

compiler.ts:72 Uint8Array(394)
compiler.ts:82 55
index.ts:332 22
index.ts:333 DECLARE arr: ARRAY[0: 10] OF INTEGER
DECLARE i: INTEGER

FOR i <- 0 TO 10
    arr[i] <- i
NEXT i

DECLARE sum: INTEGER
sum <- 0
FOR i <- 0 TO 10
    sum <- sum + arr[i]
NEXT i

OUTPUT sum

compiler.ts:18 Array(55)
compiler.ts:21 ProgramNode
generator.ts:124 0
compiler.ts:18 Array(55)
compiler.ts:21 ProgramNode
generator.ts:124 0
compiler.ts:70 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $arr (mut i32) (i32.const 0))
 (global $i (mut i32) (i32.const 0))
 (global $sum (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $main
  (global.set $arr
   (i32.const 0)
  )
  (global.set $i
   (i32.const 0)
  )
  (block
   (global.set $i
    (i32.const 0)
   )
   (loop $1
    (if
     (i32.ge_s
      (i32.const 10)
      (global.get $i)
     )
     (block
      (i32.store align=2
       (i32.add
        (global.get $arr)
        (i32.mul
         (global.get $i)
         (i32.const 4)
        )
       )
       (global.get $i)
      )
      (global.set $i
       (i32.add
        (global.get $i)
        (i32.const 1)
       )
      )
      (br $1)
     )
    )
   )
  )
  (global.set $sum
   (i32.const 0)
  )
  (global.set $sum
   (i32.const 0)
  )
  (block
   (global.set $i
    (i32.const 0)
   )
   (loop $2
    (if
     (i32.ge_s
      (i32.const 10)
      (global.get $i)
     )
     (block
      (global.set $sum
       (i32.add
        (global.get $sum)
        (i32.load align=2
         (i32.add
          (global.get $arr)
          (i32.mul
           (global.get $i)
           (i32.const 4)
          )
         )
        )
       )
      )
      (global.set $i
       (i32.add
        (global.get $i)
        (i32.const 1)
       )
      )
      (br $2)
     )
    )
   )
  )
  (call $logInteger
   (global.get $sum)
  )
 )
)

compiler.ts:72 Uint8Array(244)
compiler.ts:82 55
index.ts:332 23
index.ts:333 DECLARE arr: ARRAY[0: 10, 0: 10] OF INTEGER
DECLARE i: INTEGER
DECLARE j: INTEGER

FOR i <- 0 TO 10
    FOR j <- 0 TO 10
        arr[i, j] <- i + j
    NEXT j
NEXT i

DECLARE sum: INTEGER
sum <- 0
FOR i <- 0 TO 10
    FOR j <- 0 TO 10
        sum <- sum + arr[i, j]
    NEXT j
NEXT i

OUTPUT sum

compiler.ts:18 Array(85)
index.ts:340  SyntaxError
(anonymous) @ index.ts:340
compiler.ts:18 Array(85)
index.ts:352  SyntaxError
(anonymous) @ index.ts:352
index.ts:332 24
index.ts:333 DECLARE i: INTEGER
DECLARE j: INTEGER

DECLARE sum: INTEGER

FOR i <- 0 TO 10
    FOR j <- 0 TO 10
        sum <- sum + i + j
    NEXT j
NEXT i

OUTPUT sum

compiler.ts:18 Array(38)
compiler.ts:21 ProgramNode
compiler.ts:18 Array(38)
compiler.ts:21 ProgramNode
compiler.ts:70 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $buffer 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $i (mut i32) (i32.const 0))
 (global $j (mut i32) (i32.const 0))
 (global $sum (mut i32) (i32.const 0))
 (export "main" (func $main))
 (start $main)
 (func $main
  (global.set $i
   (i32.const 0)
  )
  (global.set $j
   (i32.const 0)
  )
  (global.set $sum
   (i32.const 0)
  )
  (block
   (global.set $i
    (i32.const 0)
   )
   (loop $2
    (if
     (i32.ge_s
      (i32.const 10)
      (global.get $i)
     )
     (block
      (block
       (global.set $j
        (i32.const 0)
       )
       (loop $1
        (if
         (i32.ge_s
          (i32.const 10)
          (global.get $j)
         )
         (block
          (global.set $sum
           (i32.add
            (i32.add
             (global.get $sum)
             (global.get $i)
            )
            (global.get $j)
           )
          )
          (global.set $j
           (i32.add
            (global.get $j)
            (i32.const 1)
           )
          )
          (br $1)
         )
        )
       )
      )
      (global.set $i
       (i32.add
        (global.get $i)
        (i32.const 1)
       )
      )
      (br $2)
     )
    )
   )
  )
  (call $logInteger
   (global.get $sum)
  )
 )
)

compiler.ts:72 Uint8Array(221)
compiler.ts:82 1210
index.ts:332 25
index.ts:333 OUTPUT "Hello World"
compiler.ts:18 Array(3)
compiler.ts:21 ProgramNode
index.ts:340  RuntimeError
(anonymous) @ index.ts:340
compiler.ts:18 Array(3)
compiler.ts:21 ProgramNode
index.ts:352  RuntimeError
(anonymous) @ index.ts:352
index.ts:369 compileCount: 22/26
index.ts:370 compileFailed: 3,13,23,25
index.ts:371 runCount: 22/26
index.ts:372 runFailed: 3,13,23,25