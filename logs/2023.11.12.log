content_scripts.js:1 今天您打开了 20 次 localhost:8080，花费了 20 分 27 秒 来浏览它。
content_scripts.js:1 你可以在【网费很贵】的选项中关闭以上提示！
index.js:551 [webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.
log.js:39 [HMR] Waiting for update signal from WDS...
 0
 OUTPUT 9 + 1
 (5) [Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1)}
 (5) [Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1), global: Scope}
 ProgramNode {kind: 0, body: Array(1), global: Scope}
 (5) [Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (call $logInteger
   (i32.add
    (i32.const 9)
    (i32.const 1)
   )
  )
 )
)

 10
 1
 DECLARE i: INTEGER
DECLARE j: INTEGER
DECLARE k: REAL

i <- 1
j <- 2
k <- 3.14
OUTPUT i + j * k

 (36) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(7)}
 (36) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(7), global: Scope}
 ProgramNode {kind: 0, body: Array(7), global: Scope}
 (36) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(7)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (block
  )
  (i32.store align=1
   (i32.const 0)
   (i32.const 1)
  )
  (i32.store align=1
   (i32.const 4)
   (i32.const 2)
  )
  (f64.store align=1
   (i32.const 8)
   (f64.const 3.14)
  )
  (call $logReal
   (f64.add
    (f64.convert_i32_s
     (i32.load align=1
      (i32.const 0)
     )
    )
    (f64.mul
     (f64.convert_i32_s
      (i32.load align=1
       (i32.const 4)
      )
     )
     (f64.load align=1
      (i32.const 8)
     )
    )
   )
  )
 )
)

 7.28
 2
 DECLARE i: INTEGER
DECLARE j: INTEGER

i <- -1.99
j <- 2.99
IF i = j + i THEN
    OUTPUT 1
ELSE
    OUTPUT 2
ENDIF

 (39) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (39) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 (39) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (i32.store align=1
   (i32.const 0)
   (i32.trunc_f64_s
    (f64.neg
     (f64.const 1.99)
    )
   )
  )
  (i32.store align=1
   (i32.const 4)
   (i32.trunc_f64_s
    (f64.const 2.99)
   )
  )
  (if
   (i32.eq
    (i32.load align=1
     (i32.const 0)
    )
    (i32.add
     (i32.load align=1
      (i32.const 4)
     )
     (i32.load align=1
      (i32.const 0)
     )
    )
   )
   (call $logInteger
    (i32.const 1)
   )
   (call $logInteger
    (i32.const 2)
   )
  )
 )
)

 2
 3
 DECLARE i: STRING
i <- "Hi"
OUTPUT i

 (13) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3)}
 (13) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3), global: Scope}
 ProgramNode {kind: 0, body: Array(3), global: Scope}
 (13) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (data $0 (i32.const 4) "Hi\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (i32.store align=1
   (i32.const 0)
   (i32.const 4)
  )
  (call $logString
   (i32.load align=1
    (i32.const 0)
   )
  )
 )
)

 Hi
 4
 DECLARE i: INTEGER
DECLARE j: INTEGER

i <- 1
WHILE i < 10
    i <- i + 1
    j <- i
ENDWHILE

OUTPUT j

 (37) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (37) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 (37) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (i32.store align=1
   (i32.const 0)
   (i32.const 1)
  )
  (loop $1
   (if
    (i32.lt_s
     (i32.load align=1
      (i32.const 0)
     )
     (i32.const 10)
    )
    (block
     (i32.store align=1
      (i32.const 0)
      (i32.add
       (i32.load align=1
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.store align=1
      (i32.const 4)
      (i32.load align=1
       (i32.const 0)
      )
     )
     (br $1)
    )
   )
  )
  (call $logInteger
   (i32.load align=1
    (i32.const 4)
   )
  )
 )
)

 10
 5
 DECLARE i: INTEGER
DECLARE j: INTEGER

i <- 1
REPEAT
    i <- i + 1
    j <- i
UNTIL i = 10

OUTPUT j

 (37) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (37) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 (37) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
compiler.ts:82 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (i32.store align=1
   (i32.const 0)
   (i32.const 1)
  )
  (loop $1
   (i32.store align=1
    (i32.const 0)
    (i32.add
     (i32.load align=1
      (i32.const 0)
     )
     (i32.const 1)
    )
   )
   (i32.store align=1
    (i32.const 4)
    (i32.load align=1
     (i32.const 0)
    )
   )
   (if
    (i32.eqz
     (i32.eq
      (i32.load align=1
       (i32.const 0)
      )
      (i32.const 10)
     )
    )
    (br $1)
   )
  )
  (call $logInteger
   (i32.load align=1
    (i32.const 4)
   )
  )
 )
)

compiler.ts:95 10
index.ts:818 6
index.ts:819 DECLARE i: INTEGER
DECLARE j: INTEGER

FOR i <- 1 TO 11
    j <- i
NEXT i

OUTPUT j

compiler.ts:19 (30) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(4)}
compiler.ts:26 (30) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:27 ProgramNode {kind: 0, body: Array(4), global: Scope}
compiler.ts:28 ProgramNode {kind: 0, body: Array(4), global: Scope}
compiler.ts:19 (30) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(4)}
compiler.ts:82 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (block
   (i32.store align=1
    (i32.const 0)
    (i32.const 1)
   )
   (loop $1
    (if
     (i32.ge_s
      (i32.const 11)
      (i32.load align=1
       (i32.const 0)
      )
     )
     (block
      (i32.store align=1
       (i32.const 4)
       (i32.load align=1
        (i32.const 0)
       )
      )
      (i32.store align=1
       (i32.const 0)
       (i32.add
        (i32.load align=1
         (i32.const 0)
        )
        (i32.const 1)
       )
      )
      (br $1)
     )
    )
   )
  )
  (call $logInteger
   (i32.load align=1
    (i32.const 4)
   )
  )
 )
)

compiler.ts:95 11
index.ts:818 7
index.ts:819 FUNCTION add(a: INTEGER, b: INTEGER) RETURNS INTEGER
    RETURN a + b
ENDFUNCTION

DECLARE i: INTEGER
DECLARE j: INTEGER

i <- 1
j <- 2
OUTPUT add(i, j)

compiler.ts:19 (50) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(6)}
compiler.ts:26 (50) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:27 ProgramNode {kind: 0, body: Array(6), global: Scope}
compiler.ts:28 ProgramNode {kind: 0, body: Array(6), global: Scope}
compiler.ts:19 (50) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(6)}
compiler.ts:82 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $add (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (block $__callablePrologue
   (i32.store align=1
    (global.get $__stackTop)
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (global.get $__stackTop)
   )
  )
  (block $__paramInit
   (i32.store align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 0)
    )
    (local.get $0)
   )
   (i32.store align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 4)
    )
    (local.get $1)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 8)
    )
   )
  )
  (block
   (local.set $2
    (i32.add
     (i32.load align=1
      (i32.add
       (global.get $__stackBase)
       (i32.const 0)
      )
     )
     (i32.load align=1
      (i32.add
       (global.get $__stackBase)
       (i32.const 4)
      )
     )
    )
   )
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
   (return
    (local.get $2)
   )
  )
  (block $__callableEpilogue
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (i32.store align=1
   (i32.const 0)
   (i32.const 1)
  )
  (i32.store align=1
   (i32.const 4)
   (i32.const 2)
  )
  (call $logInteger
   (call $add
    (i32.load align=1
     (i32.const 0)
    )
    (i32.load align=1
     (i32.const 4)
    )
   )
  )
 )
)

compiler.ts:95 3
index.ts:818 8
index.ts:819 FUNCTION for(a: INTEGER) RETURNS INTEGER
    DECLARE b: INTEGER
    DECLARE c: INTEGER

    FOR b <- 1 TO a
        c <- b
    NEXT b
    RETURN c
ENDFUNCTION

OUTPUT for(10)

compiler.ts:19 (48) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(2)}
compiler.ts:26 (48) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:27 ProgramNode {kind: 0, body: Array(2), global: Scope}
compiler.ts:28 ProgramNode {kind: 0, body: Array(2), global: Scope}
compiler.ts:19 (48) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(2)}
compiler.ts:82 (module
 (type $i32_=>_none (func (param i32)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $for (param $0 i32) (result i32)
  (local $1 i32)
  (block $__callablePrologue
   (i32.store align=1
    (global.get $__stackTop)
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (global.get $__stackTop)
   )
  )
  (block $__paramInit
   (i32.store align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 0)
    )
    (local.get $0)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 4)
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 4)
   )
  )
  (block
   (i32.store align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 4)
    )
    (i32.const 1)
   )
   (loop $1
    (if
     (i32.ge_s
      (i32.load align=1
       (i32.add
        (global.get $__stackBase)
        (i32.const 0)
       )
      )
      (i32.load align=1
       (i32.add
        (global.get $__stackBase)
        (i32.const 4)
       )
      )
     )
     (block
      (i32.store align=1
       (i32.add
        (global.get $__stackBase)
        (i32.const 8)
       )
       (i32.load align=1
        (i32.add
         (global.get $__stackBase)
         (i32.const 4)
        )
       )
      )
      (i32.store align=1
       (i32.add
        (global.get $__stackBase)
        (i32.const 4)
       )
       (i32.add
        (i32.load align=1
         (i32.add
          (global.get $__stackBase)
          (i32.const 4)
         )
        )
        (i32.const 1)
       )
      )
      (br $1)
     )
    )
   )
  )
  (block
   (local.set $1
    (i32.load align=1
     (i32.add
      (global.get $__stackBase)
      (i32.const 8)
     )
    )
   )
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
   (return
    (local.get $1)
   )
  )
  (block $__callableEpilogue
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
  )
 )
 (func $__main
  (call $logInteger
   (call $for
    (i32.const 10)
   )
  )
 )
)

compiler.ts:95 10
index.ts:818 9
index.ts:819 FUNCTION for(a: INTEGER) RETURNS INTEGER
    DECLARE b: INTEGER

    FOR a <- 1 TO 11
        b <- a
    NEXT a
    RETURN b
ENDFUNCTION

OUTPUT for(1)

compiler.ts:19 (43) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(2)}
compiler.ts:26 (43) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:27 ProgramNode {kind: 0, body: Array(2), global: Scope}
compiler.ts:28 ProgramNode {kind: 0, body: Array(2), global: Scope}
compiler.ts:19 (43) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(2)}
compiler.ts:82 (module
 (type $i32_=>_none (func (param i32)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $for (param $0 i32) (result i32)
  (local $1 i32)
  (block $__callablePrologue
   (i32.store align=1
    (global.get $__stackTop)
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (global.get $__stackTop)
   )
  )
  (block $__paramInit
   (i32.store align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 0)
    )
    (local.get $0)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 4)
   )
  )
  (block
   (i32.store align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 0)
    )
    (i32.const 1)
   )
   (loop $1
    (if
     (i32.ge_s
      (i32.const 11)
      (i32.load align=1
       (i32.add
        (global.get $__stackBase)
        (i32.const 0)
       )
      )
     )
     (block
      (i32.store align=1
       (i32.add
        (global.get $__stackBase)
        (i32.const 4)
       )
       (i32.load align=1
        (i32.add
         (global.get $__stackBase)
         (i32.const 0)
        )
       )
      )
      (i32.store align=1
       (i32.add
        (global.get $__stackBase)
        (i32.const 0)
       )
       (i32.add
        (i32.load align=1
         (i32.add
          (global.get $__stackBase)
          (i32.const 0)
         )
        )
        (i32.const 1)
       )
      )
      (br $1)
     )
    )
   )
  )
  (block
   (local.set $1
    (i32.load align=1
     (i32.add
      (global.get $__stackBase)
      (i32.const 4)
     )
    )
   )
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
   (return
    (local.get $1)
   )
  )
  (block $__callableEpilogue
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
  )
 )
 (func $__main
  (call $logInteger
   (call $for
    (i32.const 1)
   )
  )
 )
)

compiler.ts:95 11
index.ts:818 10
index.ts:819 FUNCTION recur(a: INTEGER) RETURNS INTEGER
    IF a = 10 THEN
        RETURN a
    ENDIF
    RETURN recur(a + 1)
ENDFUNCTION

OUTPUT recur(1)

compiler.ts:19 (39) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(2)}
compiler.ts:26 (39) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:27 ProgramNode {kind: 0, body: Array(2), global: Scope}
compiler.ts:28 ProgramNode {kind: 0, body: Array(2), global: Scope}
compiler.ts:19 (39) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(2)}
compiler.ts:82 (module
 (type $i32_=>_none (func (param i32)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $recur (param $0 i32) (result i32)
  (local $1 i32)
  (block $__callablePrologue
   (i32.store align=1
    (global.get $__stackTop)
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (global.get $__stackTop)
   )
  )
  (block $__paramInit
   (i32.store align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 0)
    )
    (local.get $0)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
  )
  (if
   (i32.eq
    (i32.load align=1
     (i32.add
      (global.get $__stackBase)
      (i32.const 0)
     )
    )
    (i32.const 10)
   )
   (block
    (local.set $1
     (i32.load align=1
      (i32.add
       (global.get $__stackBase)
       (i32.const 0)
      )
     )
    )
    (global.set $__stackTop
     (global.get $__stackBase)
    )
    (global.set $__stackTop
     (i32.sub
      (global.get $__stackTop)
      (i32.const 4)
     )
    )
    (global.set $__stackBase
     (i32.load align=1
      (global.get $__stackTop)
     )
    )
    (return
     (local.get $1)
    )
   )
  )
  (block
   (local.set $1
    (call $recur
     (i32.add
      (i32.load align=1
       (i32.add
        (global.get $__stackBase)
        (i32.const 0)
       )
      )
      (i32.const 1)
     )
    )
   )
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
   (return
    (local.get $1)
   )
  )
  (block $__callableEpilogue
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
  )
 )
 (func $__main
  (call $logInteger
   (call $recur
    (i32.const 1)
   )
  )
 )
)

compiler.ts:95 10
index.ts:818 11
index.ts:819 DECLARE a: INTEGER
a <- 1

FUNCTION scope() RETURNS INTEGER
    DECLARE b: INTEGER
    DECLARE c: INTEGER

    b <- 1
    c <- 2
    RETURN a + b + c
ENDFUNCTION

OUTPUT scope()

compiler.ts:19 (52) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(4)}
compiler.ts:26 (52) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:27 ProgramNode {kind: 0, body: Array(4), global: Scope}
compiler.ts:28 ProgramNode {kind: 0, body: Array(4), global: Scope}
compiler.ts:19 (52) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(4)}
compiler.ts:82 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $scope (result i32)
  (local $0 i32)
  (block $__callablePrologue
   (i32.store align=1
    (global.get $__stackTop)
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (global.get $__stackTop)
   )
  )
  (block $__paramInit
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 0)
    )
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 4)
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 4)
   )
  )
  (i32.store align=1
   (i32.add
    (global.get $__stackBase)
    (i32.const 0)
   )
   (i32.const 1)
  )
  (i32.store align=1
   (i32.add
    (global.get $__stackBase)
    (i32.const 4)
   )
   (i32.const 2)
  )
  (block
   (local.set $0
    (i32.add
     (i32.add
      (i32.load align=1
       (i32.const 0)
      )
      (i32.load align=1
       (i32.add
        (global.get $__stackBase)
        (i32.const 0)
       )
      )
     )
     (i32.load align=1
      (i32.add
       (global.get $__stackBase)
       (i32.const 4)
      )
     )
    )
   )
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
   (return
    (local.get $0)
   )
  )
  (block $__callableEpilogue
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
  )
 )
 (func $__main
  (block
  )
  (i32.store align=1
   (i32.const 0)
   (i32.const 1)
  )
  (call $logInteger
   (call $scope)
  )
 )
)

compiler.ts:95 4
index.ts:818 12
index.ts:819 PROCEDURE print(a: INTEGER)
    DECLARE b: INTEGER
    DECLARE c: INTEGER

    b <- 2
    c <- 2
    OUTPUT a + b + c
ENDPROCEDURE

CALL print(1)

compiler.ts:19 (44) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(2)}
compiler.ts:26 (44) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:27 ProgramNode {kind: 0, body: Array(2), global: Scope}
compiler.ts:28 ProgramNode {kind: 0, body: Array(2), global: Scope}
compiler.ts:19 (44) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(2)}
compiler.ts:82 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $print (param $0 i32)
  (block $__callablePrologue
   (i32.store align=1
    (global.get $__stackTop)
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (global.get $__stackTop)
   )
  )
  (block $__paramInit
   (i32.store align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 0)
    )
    (local.get $0)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 4)
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 4)
   )
  )
  (i32.store align=1
   (i32.add
    (global.get $__stackBase)
    (i32.const 4)
   )
   (i32.const 2)
  )
  (i32.store align=1
   (i32.add
    (global.get $__stackBase)
    (i32.const 8)
   )
   (i32.const 2)
  )
  (call $logInteger
   (i32.add
    (i32.add
     (i32.load align=1
      (i32.add
       (global.get $__stackBase)
       (i32.const 0)
      )
     )
     (i32.load align=1
      (i32.add
       (global.get $__stackBase)
       (i32.const 4)
      )
     )
    )
    (i32.load align=1
     (i32.add
      (global.get $__stackBase)
      (i32.const 8)
     )
    )
   )
  )
  (block $__callableEpilogue
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
  )
 )
 (func $__main
  (call $print
   (i32.const 1)
  )
 )
)

compiler.ts:95 5
index.ts:818 13
index.ts:819 DECLARE i: INTEGER
i <- 1

PROCEDURE increment(BYREF a: INTEGER)
    a <- a + 1
ENDPROCEDURE

CALL increment(i)
OUTPUT i

compiler.ts:19 (38) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(5)}
compiler.ts:26 (38) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:27 ProgramNode {kind: 0, body: Array(5), global: Scope}
compiler.ts:28 ProgramNode {kind: 0, body: Array(5), global: Scope}
compiler.ts:19 (38) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(5)}
compiler.ts:82 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $increment (param $0 i32)
  (block $__callablePrologue
   (i32.store align=1
    (global.get $__stackTop)
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (global.get $__stackTop)
   )
  )
  (block $__paramInit
   (i32.store align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 0)
    )
    (local.get $0)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
  )
  (i32.store align=1
   (i32.add
    (global.get $__stackBase)
    (i32.const 0)
   )
   (i32.add
    (i32.load align=1
     (i32.add
      (global.get $__stackBase)
      (i32.const 0)
     )
    )
    (i32.const 1)
   )
  )
  (block $__callableEpilogue
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
  )
 )
 (func $__main
  (block
  )
  (i32.store align=1
   (i32.const 0)
   (i32.const 1)
  )
  (call $increment
   (i32.load align=1
    (i32.const 0)
   )
  )
  (call $logInteger
   (i32.load align=1
    (i32.const 0)
   )
  )
 )
)

 1
 14
 DECLARE i: INTEGER
i <- 1

PROCEDURE increment()
    i <- i + 1
ENDPROCEDURE

CALL increment()
OUTPUT i

 (33) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (33) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 (33) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_none (func))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $increment
  (block $__callablePrologue
   (i32.store align=1
    (global.get $__stackTop)
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (global.get $__stackTop)
   )
  )
  (block $__paramInit
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 0)
    )
   )
  )
  (i32.store align=1
   (i32.const 0)
   (i32.add
    (i32.load align=1
     (i32.const 0)
    )
    (i32.const 1)
   )
  )
  (block $__callableEpilogue
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
  )
 )
 (func $__main
  (block
  )
  (i32.store align=1
   (i32.const 0)
   (i32.const 1)
  )
  (call $increment)
  (call $logInteger
   (i32.load align=1
    (i32.const 0)
   )
  )
 )
)

 2
 15
 FUNCTION add(a: REAL, b: REAL) RETURNS REAL
    DECLARE c: REAL
    c <- a + b
    RETURN c
ENDFUNCTION

DECLARE i: REAL
DECLARE j: REAL

i <- 1.1
j <- 2.2
OUTPUT add(i, j)

 (59) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(6)}
 (59) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(6), global: Scope}
 ProgramNode {kind: 0, body: Array(6), global: Scope}
 (59) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(6)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $f64_f64_=>_f64 (func (param f64 f64) (result f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $add (param $0 f64) (param $1 f64) (result f64)
  (local $2 f64)
  (block $__callablePrologue
   (i32.store align=1
    (global.get $__stackTop)
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (global.get $__stackTop)
   )
  )
  (block $__paramInit
   (f64.store align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 0)
    )
    (local.get $0)
   )
   (f64.store align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 8)
    )
    (local.get $1)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 16)
    )
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 8)
   )
  )
  (f64.store align=1
   (i32.add
    (global.get $__stackBase)
    (i32.const 16)
   )
   (f64.add
    (f64.load align=1
     (i32.add
      (global.get $__stackBase)
      (i32.const 0)
     )
    )
    (f64.load align=1
     (i32.add
      (global.get $__stackBase)
      (i32.const 8)
     )
    )
   )
  )
  (block
   (local.set $2
    (f64.load align=1
     (i32.add
      (global.get $__stackBase)
      (i32.const 16)
     )
    )
   )
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
   (return
    (local.get $2)
   )
  )
  (block $__callableEpilogue
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (f64.store align=1
   (i32.const 0)
   (f64.const 1.1)
  )
  (f64.store align=1
   (i32.const 8)
   (f64.const 2.2)
  )
  (call $logReal
   (call $add
    (f64.load align=1
     (i32.const 0)
    )
    (f64.load align=1
     (i32.const 8)
    )
   )
  )
 )
)

 3.3000000000000003
 16
 OUTPUT 'a'
 (3) [Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1)}
 (3) [Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1), global: Scope}
 ProgramNode {kind: 0, body: Array(1), global: Scope}
 (3) [Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (call $logChar
   (i32.const 97)
  )
 )
)

 a
 17
 DECLARE i: CHAR
i <- 'v'

OUTPUT i

 (14) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3)}
 (14) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3), global: Scope}
 ProgramNode {kind: 0, body: Array(3), global: Scope}
 (14) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (i32.store align=1
   (i32.const 0)
   (i32.const 118)
  )
  (call $logChar
   (i32.load align=1
    (i32.const 0)
   )
  )
 )
)

 v
 18
 DECLARE i: INTEGER

i <- 1
OUTPUT -i

 (15) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3)}
 (15) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3), global: Scope}
 ProgramNode {kind: 0, body: Array(3), global: Scope}
 (15) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (i32.store align=1
   (i32.const 0)
   (i32.const 1)
  )
  (call $logInteger
   (i32.sub
    (i32.const 0)
    (i32.load align=1
     (i32.const 0)
    )
   )
  )
 )
)

 -1
 19
 DECLARE i: REAL

i <- 1
OUTPUT -i

 (15) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3)}
 (15) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3), global: Scope}
 ProgramNode {kind: 0, body: Array(3), global: Scope}
 (15) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (f64.store align=1
   (i32.const 0)
   (f64.convert_i32_s
    (i32.const 1)
   )
  )
  (call $logReal
   (f64.neg
    (f64.load align=1
     (i32.const 0)
    )
   )
  )
 )
)

 -1
 20
 DECLARE arr: ARRAY[0: 3] OF INTEGER

arr[0] <- 1
arr[1] <- 2
arr[2] <- 3

OUTPUT arr[0] + arr[1] + arr[2]
 (51) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (51) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 (51) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 0)
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 1)
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 1)
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 2)
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 2)
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 3)
  )
  (call $logInteger
   (i32.add
    (i32.add
     (i32.load align=1
      (i32.add
       (i32.const 0)
       (i32.mul
        (i32.add
         (i32.const 0)
         (i32.mul
          (i32.sub
           (i32.const 0)
           (i32.const 0)
          )
          (i32.const 1)
         )
        )
        (i32.const 4)
       )
      )
     )
     (i32.load align=1
      (i32.add
       (i32.const 0)
       (i32.mul
        (i32.add
         (i32.const 0)
         (i32.mul
          (i32.sub
           (i32.const 1)
           (i32.const 0)
          )
          (i32.const 1)
         )
        )
        (i32.const 4)
       )
      )
     )
    )
    (i32.load align=1
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.add
        (i32.const 0)
        (i32.mul
         (i32.sub
          (i32.const 2)
          (i32.const 0)
         )
         (i32.const 1)
        )
       )
       (i32.const 4)
      )
     )
    )
   )
  )
 )
)

 6
 21
 DECLARE arr: ARRAY[0: 9] OF INTEGER

arr[0] <- 1
arr[1] <- 2
arr[2] <- 3
arr[3] <- 4
arr[4] <- 5
arr[5] <- 6
arr[6] <- 7
arr[7] <- 8
arr[8] <- 9
arr[9] <- 10

OUTPUT arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]

 (136) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(12)}
 (136) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(12), global: Scope}
 ProgramNode {kind: 0, body: Array(12), global: Scope}
 (136) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(12)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 0)
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 1)
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 1)
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 2)
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 2)
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 3)
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 3)
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 4)
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 4)
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 5)
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 5)
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 6)
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 6)
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 7)
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 7)
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 8)
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 8)
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 9)
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 9)
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 10)
  )
  (call $logInteger
   (i32.add
    (i32.add
     (i32.add
      (i32.add
       (i32.add
        (i32.add
         (i32.add
          (i32.add
           (i32.add
            (i32.load align=1
             (i32.add
              (i32.const 0)
              (i32.mul
               (i32.add
                (i32.const 0)
                (i32.mul
                 (i32.sub
                  (i32.const 0)
                  (i32.const 0)
                 )
                 (i32.const 1)
                )
               )
               (i32.const 4)
              )
             )
            )
            (i32.load align=1
             (i32.add
              (i32.const 0)
              (i32.mul
               (i32.add
                (i32.const 0)
                (i32.mul
                 (i32.sub
                  (i32.const 1)
                  (i32.const 0)
                 )
                 (i32.const 1)
                )
               )
               (i32.const 4)
              )
             )
            )
           )
           (i32.load align=1
            (i32.add
             (i32.const 0)
             (i32.mul
              (i32.add
               (i32.const 0)
               (i32.mul
                (i32.sub
                 (i32.const 2)
                 (i32.const 0)
                )
                (i32.const 1)
               )
              )
              (i32.const 4)
             )
            )
           )
          )
          (i32.load align=1
           (i32.add
            (i32.const 0)
            (i32.mul
             (i32.add
              (i32.const 0)
              (i32.mul
               (i32.sub
                (i32.const 3)
                (i32.const 0)
               )
               (i32.const 1)
              )
             )
             (i32.const 4)
            )
           )
          )
         )
         (i32.load align=1
          (i32.add
           (i32.const 0)
           (i32.mul
            (i32.add
             (i32.const 0)
             (i32.mul
              (i32.sub
               (i32.const 4)
               (i32.const 0)
              )
              (i32.const 1)
             )
            )
            (i32.const 4)
           )
          )
         )
        )
        (i32.load align=1
         (i32.add
          (i32.const 0)
          (i32.mul
           (i32.add
            (i32.const 0)
            (i32.mul
             (i32.sub
              (i32.const 5)
              (i32.const 0)
             )
             (i32.const 1)
            )
           )
           (i32.const 4)
          )
         )
        )
       )
       (i32.load align=1
        (i32.add
         (i32.const 0)
         (i32.mul
          (i32.add
           (i32.const 0)
           (i32.mul
            (i32.sub
             (i32.const 6)
             (i32.const 0)
            )
            (i32.const 1)
           )
          )
          (i32.const 4)
         )
        )
       )
      )
      (i32.load align=1
       (i32.add
        (i32.const 0)
        (i32.mul
         (i32.add
          (i32.const 0)
          (i32.mul
           (i32.sub
            (i32.const 7)
            (i32.const 0)
           )
           (i32.const 1)
          )
         )
         (i32.const 4)
        )
       )
      )
     )
     (i32.load align=1
      (i32.add
       (i32.const 0)
       (i32.mul
        (i32.add
         (i32.const 0)
         (i32.mul
          (i32.sub
           (i32.const 8)
           (i32.const 0)
          )
          (i32.const 1)
         )
        )
        (i32.const 4)
       )
      )
     )
    )
    (i32.load align=1
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.add
        (i32.const 0)
        (i32.mul
         (i32.sub
          (i32.const 9)
          (i32.const 0)
         )
         (i32.const 1)
        )
       )
       (i32.const 4)
      )
     )
    )
   )
  )
 )
)

 55
 22
 DECLARE arr: ARRAY[0: 10] OF INTEGER
DECLARE i: INTEGER

FOR i <- 0 TO 10
    arr[i] <- i
NEXT i

DECLARE sum: INTEGER
sum <- 0
FOR i <- 0 TO 10
    sum <- sum + arr[i]
NEXT i

OUTPUT sum

 (69) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(7)}
 (69) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(7), global: Scope}
 ProgramNode {kind: 0, body: Array(7), global: Scope}
 (69) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(7)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (block
   (i32.store align=1
    (i32.const 44)
    (i32.const 0)
   )
   (loop $1
    (if
     (i32.ge_s
      (i32.const 10)
      (i32.load align=1
       (i32.const 44)
      )
     )
     (block
      (i32.store align=1
       (i32.add
        (i32.const 0)
        (i32.mul
         (i32.add
          (i32.const 0)
          (i32.mul
           (i32.sub
            (i32.load align=1
             (i32.const 44)
            )
            (i32.const 0)
           )
           (i32.const 1)
          )
         )
         (i32.const 4)
        )
       )
       (i32.load align=1
        (i32.const 44)
       )
      )
      (i32.store align=1
       (i32.const 44)
       (i32.add
        (i32.load align=1
         (i32.const 44)
        )
        (i32.const 1)
       )
      )
      (br $1)
     )
    )
   )
  )
  (block
  )
  (i32.store align=1
   (i32.const 48)
   (i32.const 0)
  )
  (block
   (i32.store align=1
    (i32.const 44)
    (i32.const 0)
   )
   (loop $2
    (if
     (i32.ge_s
      (i32.const 10)
      (i32.load align=1
       (i32.const 44)
      )
     )
     (block
      (i32.store align=1
       (i32.const 48)
       (i32.add
        (i32.load align=1
         (i32.const 48)
        )
        (i32.load align=1
         (i32.add
          (i32.const 0)
          (i32.mul
           (i32.add
            (i32.const 0)
            (i32.mul
             (i32.sub
              (i32.load align=1
               (i32.const 44)
              )
              (i32.const 0)
             )
             (i32.const 1)
            )
           )
           (i32.const 4)
          )
         )
        )
       )
      )
      (i32.store align=1
       (i32.const 44)
       (i32.add
        (i32.load align=1
         (i32.const 44)
        )
        (i32.const 1)
       )
      )
      (br $2)
     )
    )
   )
  )
  (call $logInteger
   (i32.load align=1
    (i32.const 48)
   )
  )
 )
)

 55
 23
 DECLARE i: INTEGER
DECLARE j: INTEGER
DECLARE arr: ARRAY[0: 10, 0: 10] OF INTEGER

FOR i <- 0 TO 10
    FOR j <- 0 TO 10
        arr[i, j] <- i + j
    NEXT j
NEXT i

DECLARE sum: INTEGER
sum <- 0
FOR i <- 0 TO 10
    FOR j <- 0 TO 10
        sum <- sum + arr[i, j]
    NEXT j
NEXT i

OUTPUT sum

 (104) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(8)}
 (104) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(8), global: Scope}
 ProgramNode {kind: 0, body: Array(8), global: Scope}
 (104) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(8)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (block
  )
  (block
   (i32.store align=1
    (i32.const 0)
    (i32.const 0)
   )
   (loop $2
    (if
     (i32.ge_s
      (i32.const 10)
      (i32.load align=1
       (i32.const 0)
      )
     )
     (block
      (block
       (i32.store align=1
        (i32.const 4)
        (i32.const 0)
       )
       (loop $1
        (if
         (i32.ge_s
          (i32.const 10)
          (i32.load align=1
           (i32.const 4)
          )
         )
         (block
          (i32.store align=1
           (i32.add
            (i32.const 8)
            (i32.mul
             (i32.add
              (i32.add
               (i32.const 0)
               (i32.mul
                (i32.sub
                 (i32.load align=1
                  (i32.const 0)
                 )
                 (i32.const 0)
                )
                (i32.const 11)
               )
              )
              (i32.mul
               (i32.sub
                (i32.load align=1
                 (i32.const 4)
                )
                (i32.const 0)
               )
               (i32.const 1)
              )
             )
             (i32.const 4)
            )
           )
           (i32.add
            (i32.load align=1
             (i32.const 0)
            )
            (i32.load align=1
             (i32.const 4)
            )
           )
          )
          (i32.store align=1
           (i32.const 4)
           (i32.add
            (i32.load align=1
             (i32.const 4)
            )
            (i32.const 1)
           )
          )
          (br $1)
         )
        )
       )
      )
      (i32.store align=1
       (i32.const 0)
       (i32.add
        (i32.load align=1
         (i32.const 0)
        )
        (i32.const 1)
       )
      )
      (br $2)
     )
    )
   )
  )
  (block
  )
  (i32.store align=1
   (i32.const 492)
   (i32.const 0)
  )
  (block
   (i32.store align=1
    (i32.const 0)
    (i32.const 0)
   )
   (loop $4
    (if
     (i32.ge_s
      (i32.const 10)
      (i32.load align=1
       (i32.const 0)
      )
     )
     (block
      (block
       (i32.store align=1
        (i32.const 4)
        (i32.const 0)
       )
       (loop $3
        (if
         (i32.ge_s
          (i32.const 10)
          (i32.load align=1
           (i32.const 4)
          )
         )
         (block
          (i32.store align=1
           (i32.const 492)
           (i32.add
            (i32.load align=1
             (i32.const 492)
            )
            (i32.load align=1
             (i32.add
              (i32.const 8)
              (i32.mul
               (i32.add
                (i32.add
                 (i32.const 0)
                 (i32.mul
                  (i32.sub
                   (i32.load align=1
                    (i32.const 0)
                   )
                   (i32.const 0)
                  )
                  (i32.const 11)
                 )
                )
                (i32.mul
                 (i32.sub
                  (i32.load align=1
                   (i32.const 4)
                  )
                  (i32.const 0)
                 )
                 (i32.const 1)
                )
               )
               (i32.const 4)
              )
             )
            )
           )
          )
          (i32.store align=1
           (i32.const 4)
           (i32.add
            (i32.load align=1
             (i32.const 4)
            )
            (i32.const 1)
           )
          )
          (br $3)
         )
        )
       )
      )
      (i32.store align=1
       (i32.const 0)
       (i32.add
        (i32.load align=1
         (i32.const 0)
        )
        (i32.const 1)
       )
      )
      (br $4)
     )
    )
   )
  )
  (call $logInteger
   (i32.load align=1
    (i32.const 492)
   )
  )
 )
)

 1210
 24
 DECLARE i: INTEGER
DECLARE j: INTEGER

DECLARE sum: INTEGER

FOR i <- 0 TO 10
    FOR j <- 0 TO 10
        sum <- sum + i + j
    NEXT j
NEXT i

OUTPUT sum

 (50) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (50) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 (50) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (block
  )
  (block
   (i32.store align=1
    (i32.const 0)
    (i32.const 0)
   )
   (loop $2
    (if
     (i32.ge_s
      (i32.const 10)
      (i32.load align=1
       (i32.const 0)
      )
     )
     (block
      (block
       (i32.store align=1
        (i32.const 4)
        (i32.const 0)
       )
       (loop $1
        (if
         (i32.ge_s
          (i32.const 10)
          (i32.load align=1
           (i32.const 4)
          )
         )
         (block
          (i32.store align=1
           (i32.const 8)
           (i32.add
            (i32.add
             (i32.load align=1
              (i32.const 8)
             )
             (i32.load align=1
              (i32.const 0)
             )
            )
            (i32.load align=1
             (i32.const 4)
            )
           )
          )
          (i32.store align=1
           (i32.const 4)
           (i32.add
            (i32.load align=1
             (i32.const 4)
            )
            (i32.const 1)
           )
          )
          (br $1)
         )
        )
       )
      )
      (i32.store align=1
       (i32.const 0)
       (i32.add
        (i32.load align=1
         (i32.const 0)
        )
        (i32.const 1)
       )
      )
      (br $2)
     )
    )
   )
  )
  (call $logInteger
   (i32.load align=1
    (i32.const 8)
   )
  )
 )
)

 1210
 25
 OUTPUT "Hello World"
 (3) [Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1)}
 (3) [Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1), global: Scope}
 ProgramNode {kind: 0, body: Array(1), global: Scope}
 (3) [Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (data $0 (i32.const 0) "Hello World\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (call $logString
   (i32.const 0)
  )
 )
)

 Hello World
 26
 DECLARE i: ARRAY[0: 1] OF INTEGER

i[0] <- 2147483647
OUTPUT i[0]

 (27) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3)}
 (27) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3), global: Scope}
 ProgramNode {kind: 0, body: Array(3), global: Scope}
 (27) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 0)
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 2147483647)
  )
  (call $logInteger
   (i32.load align=1
    (i32.add
     (i32.const 0)
     (i32.mul
      (i32.add
       (i32.const 0)
       (i32.mul
        (i32.sub
         (i32.const 0)
         (i32.const 0)
        )
        (i32.const 1)
       )
      )
      (i32.const 4)
     )
    )
   )
  )
 )
)

 2147483647
 27
 DECLARE i: ARRAY[0: 2] OF INTEGER

i[0] <- 2147483647
i[1] <- -2147483648
OUTPUT i[0] + i[1]

 (40) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(4)}
 (40) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(4), global: Scope}
 ProgramNode {kind: 0, body: Array(4), global: Scope}
 (40) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(4)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 0)
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 2147483647)
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 1)
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.sub
    (i32.const 0)
    (i32.const -2147483648)
   )
  )
  (call $logInteger
   (i32.add
    (i32.load align=1
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.add
        (i32.const 0)
        (i32.mul
         (i32.sub
          (i32.const 0)
          (i32.const 0)
         )
         (i32.const 1)
        )
       )
       (i32.const 4)
      )
     )
    )
    (i32.load align=1
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.add
        (i32.const 0)
        (i32.mul
         (i32.sub
          (i32.const 1)
          (i32.const 0)
         )
         (i32.const 1)
        )
       )
       (i32.const 4)
      )
     )
    )
   )
  )
 )
)

 -1
 28
 DECLARE i: STRING
DECLARE j: STRING

i <- "Hello"
j <- "World"

OUTPUT i & j

 (26) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
  RuntimeError {msg: 'Unreachable code'}
(anonymous) @ bundle.js:2666
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
(anonymous) @ bundle.js:1903
__awaiter @ bundle.js:1899
compileTest @ bundle.js:2655
(anonymous) @ bundle.js:2684
await in (anonymous)(异步)
__webpack_require__.a @ bundle.js:7433
./src/index.ts @ bundle.js:1891
__webpack_require__ @ bundle.js:7363
(anonymous) @ bundle.js:8624
(anonymous) @ bundle.js:8626
 (26) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
  RuntimeError {msg: 'Unreachable code'}
(anonymous) @ bundle.js:2677
rejected @ bundle.js:1901
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
(anonymous) @ bundle.js:1903
__awaiter @ bundle.js:1899
compileTest @ bundle.js:2655
(anonymous) @ bundle.js:2684
await in (anonymous)(异步)
__webpack_require__.a @ bundle.js:7433
./src/index.ts @ bundle.js:1891
__webpack_require__ @ bundle.js:7363
(anonymous) @ bundle.js:8624
(anonymous) @ bundle.js:8626
 29
 IF 3 THEN
    OUTPUT 2
ENDIF

 (10) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1)}
 (10) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1), global: Scope}
 ProgramNode {kind: 0, body: Array(1), global: Scope}
 (10) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (if
   (i32.const 3)
   (call $logInteger
    (i32.const 2)
   )
  )
 )
)

 2
 30
 DECLARE i: ARRAY[0: 10] OF STRING

i[0] <- "nihao"

OUTPUT i[0]

 (28) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3)}
 (28) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3), global: Scope}
 ProgramNode {kind: 0, body: Array(3), global: Scope}
 (28) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(3)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (data $0 (i32.const 44) "nihao\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 0)
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 44)
  )
  (call $logString
   (i32.load align=1
    (i32.add
     (i32.const 0)
     (i32.mul
      (i32.add
       (i32.const 0)
       (i32.mul
        (i32.sub
         (i32.const 0)
         (i32.const 0)
        )
        (i32.const 1)
       )
      )
      (i32.const 4)
     )
    )
   )
  )
 )
)

 nihao
 31
 OUTPUT "编码测试"
 (3) [Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1)}
 (3) [Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1), global: Scope}
 ProgramNode {kind: 0, body: Array(1), global: Scope}
 (3) [Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (data $0 (i32.const 0) "\e7\bc\96\e7\a0\81\e6\b5\8b\e8\af\95\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (call $logString
   (i32.const 0)
  )
 )
)

 编码测试
 32
 DECLARE arr: ARRAY[0: 9] OF REAL
DECLARE i: INTEGER

FOR i <- 0 TO 9
    // i / 10 makes an integer value
    arr[i] <- i + i / 10.0
NEXT i

DECLARE sum: REAL

FOR i <- 0 TO 9
    sum <- sum + arr[i]
NEXT i

OUTPUT sum

 (71) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(6)}
 (71) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(6), global: Scope}
 ProgramNode {kind: 0, body: Array(6), global: Scope}
 (71) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(6)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (block
   (i32.store align=1
    (i32.const 80)
    (i32.const 0)
   )
   (loop $1
    (if
     (i32.ge_s
      (i32.const 9)
      (i32.load align=1
       (i32.const 80)
      )
     )
     (block
      (f64.store align=1
       (i32.add
        (i32.const 0)
        (i32.mul
         (i32.add
          (i32.const 0)
          (i32.mul
           (i32.sub
            (i32.load align=1
             (i32.const 80)
            )
            (i32.const 0)
           )
           (i32.const 1)
          )
         )
         (i32.const 8)
        )
       )
       (f64.add
        (f64.convert_i32_s
         (i32.load align=1
          (i32.const 80)
         )
        )
        (f64.div
         (f64.convert_i32_s
          (i32.load align=1
           (i32.const 80)
          )
         )
         (f64.const 10)
        )
       )
      )
      (i32.store align=1
       (i32.const 80)
       (i32.add
        (i32.load align=1
         (i32.const 80)
        )
        (i32.const 1)
       )
      )
      (br $1)
     )
    )
   )
  )
  (block
  )
  (block
   (i32.store align=1
    (i32.const 80)
    (i32.const 0)
   )
   (loop $2
    (if
     (i32.ge_s
      (i32.const 9)
      (i32.load align=1
       (i32.const 80)
      )
     )
     (block
      (f64.store align=1
       (i32.const 84)
       (f64.add
        (f64.load align=1
         (i32.const 84)
        )
        (f64.load align=1
         (i32.add
          (i32.const 0)
          (i32.mul
           (i32.add
            (i32.const 0)
            (i32.mul
             (i32.sub
              (i32.load align=1
               (i32.const 80)
              )
              (i32.const 0)
             )
             (i32.const 1)
            )
           )
           (i32.const 8)
          )
         )
        )
       )
      )
      (i32.store align=1
       (i32.const 80)
       (i32.add
        (i32.load align=1
         (i32.const 80)
        )
        (i32.const 1)
       )
      )
      (br $2)
     )
    )
   )
  )
  (call $logReal
   (f64.load align=1
    (i32.const 84)
   )
  )
 )
)

 49.5
 33
 OUTPUT 1.0 / 20
 (5) [Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1)}
 (5) [Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1), global: Scope}
 ProgramNode {kind: 0, body: Array(1), global: Scope}
 (5) [Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (call $logReal
   (f64.div
    (f64.const 1)
    (f64.convert_i32_s
     (i32.const 20)
    )
   )
  )
 )
)

 0.05
 34
 OUTPUT 1 / 20
 (5) [Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1)}
 (5) [Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1), global: Scope}
 ProgramNode {kind: 0, body: Array(1), global: Scope}
 (5) [Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (call $logInteger
   (i32.div_s
    (i32.const 1)
    (i32.const 20)
   )
  )
 )
)

 0
 35
 FUNCTION print() RETURNS STRING
    DECLARE str: STRING
    str <- "Hi"
    RETURN str
ENDFUNCTION

OUTPUT print()

 (28) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(2)}
 (28) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(2), global: Scope}
 ProgramNode {kind: 0, body: Array(2), global: Scope}
 (28) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(2)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (data $0 (i32.const 0) "Hi\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $print (result i32)
  (local $0 i32)
  (block $__callablePrologue
   (i32.store align=1
    (global.get $__stackTop)
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (global.get $__stackTop)
   )
  )
  (block $__paramInit
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 0)
    )
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 4)
   )
  )
  (i32.store align=1
   (i32.add
    (global.get $__stackBase)
    (i32.const 0)
   )
   (i32.const 0)
  )
  (block
   (local.set $0
    (i32.load align=1
     (i32.add
      (global.get $__stackBase)
      (i32.const 0)
     )
    )
   )
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
   (return
    (local.get $0)
   )
  )
  (block $__callableEpilogue
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
  )
 )
 (func $__main
  (call $logString
   (call $print)
  )
 )
)

 Hi
 36
 PROCEDURE print()
    DECLARE str: STRING
    str <- "Hi"
    OUTPUT str
ENDPROCEDURE

CALL print()

 (26) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(2)}
 (26) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(2), global: Scope}
 ProgramNode {kind: 0, body: Array(2), global: Scope}
 (26) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(2)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_none (func))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (data $0 (i32.const 0) "Hi\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $print
  (block $__callablePrologue
   (i32.store align=1
    (global.get $__stackTop)
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (global.get $__stackTop)
   )
  )
  (block $__paramInit
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 0)
    )
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 4)
   )
  )
  (i32.store align=1
   (i32.add
    (global.get $__stackBase)
    (i32.const 0)
   )
   (i32.const 0)
  )
  (call $logString
   (i32.load align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 0)
    )
   )
  )
  (block $__callableEpilogue
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
  )
 )
 (func $__main
  (call $print)
 )
)

 Hi
 37
 FUNCTION sum() RETURNS INTEGER
    DECLARE sum: INTEGER
    DECLARE arr: ARRAY[0: 10] OF INTEGER
    DECLARE i: INTEGER
    FOR i <- 0 TO 10
        arr[i] <- i
    NEXT i
    
    FOR i <- 0 TO 10
        sum <- sum + arr[i]
    NEXT i
    RETURN sum
ENDFUNCTION

OUTPUT sum()

 (78) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(2)}
 (78) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(2), global: Scope}
 ProgramNode {kind: 0, body: Array(2), global: Scope}
 (78) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(2)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $sum (result i32)
  (local $0 i32)
  (block $__callablePrologue
   (i32.store align=1
    (global.get $__stackTop)
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (global.get $__stackTop)
   )
  )
  (block $__paramInit
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 0)
    )
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 4)
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 44)
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 4)
   )
  )
  (block
   (i32.store align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 48)
    )
    (i32.const 0)
   )
   (loop $1
    (if
     (i32.ge_s
      (i32.const 10)
      (i32.load align=1
       (i32.add
        (global.get $__stackBase)
        (i32.const 48)
       )
      )
     )
     (block
      (i32.store align=1
       (i32.add
        (i32.add
         (global.get $__stackBase)
         (i32.const 4)
        )
        (i32.mul
         (i32.add
          (i32.const 0)
          (i32.mul
           (i32.sub
            (i32.load align=1
             (i32.add
              (global.get $__stackBase)
              (i32.const 48)
             )
            )
            (i32.const 0)
           )
           (i32.const 1)
          )
         )
         (i32.const 4)
        )
       )
       (i32.load align=1
        (i32.add
         (global.get $__stackBase)
         (i32.const 48)
        )
       )
      )
      (i32.store align=1
       (i32.add
        (global.get $__stackBase)
        (i32.const 48)
       )
       (i32.add
        (i32.load align=1
         (i32.add
          (global.get $__stackBase)
          (i32.const 48)
         )
        )
        (i32.const 1)
       )
      )
      (br $1)
     )
    )
   )
  )
  (block
   (i32.store align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 48)
    )
    (i32.const 0)
   )
   (loop $2
    (if
     (i32.ge_s
      (i32.const 10)
      (i32.load align=1
       (i32.add
        (global.get $__stackBase)
        (i32.const 48)
       )
      )
     )
     (block
      (i32.store align=1
       (i32.add
        (global.get $__stackBase)
        (i32.const 0)
       )
       (i32.add
        (i32.load align=1
         (i32.add
          (global.get $__stackBase)
          (i32.const 0)
         )
        )
        (i32.load align=1
         (i32.add
          (i32.add
           (global.get $__stackBase)
           (i32.const 4)
          )
          (i32.mul
           (i32.add
            (i32.const 0)
            (i32.mul
             (i32.sub
              (i32.load align=1
               (i32.add
                (global.get $__stackBase)
                (i32.const 48)
               )
              )
              (i32.const 0)
             )
             (i32.const 1)
            )
           )
           (i32.const 4)
          )
         )
        )
       )
      )
      (i32.store align=1
       (i32.add
        (global.get $__stackBase)
        (i32.const 48)
       )
       (i32.add
        (i32.load align=1
         (i32.add
          (global.get $__stackBase)
          (i32.const 48)
         )
        )
        (i32.const 1)
       )
      )
      (br $2)
     )
    )
   )
  )
  (block
   (local.set $0
    (i32.load align=1
     (i32.add
      (global.get $__stackBase)
      (i32.const 0)
     )
    )
   )
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
   (return
    (local.get $0)
   )
  )
  (block $__callableEpilogue
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
  )
 )
 (func $__main
  (call $logInteger
   (call $sum)
  )
 )
)

 55
 38
 FUNCTION sum(arr: ARRAY) RETURNS INTEGER
    DECLARE sum: INTEGER
    DECLARE i: INTEGER

    FOR i <- 0 TO 10
        sum <- sum + arr[i]
    NEXT i
    RETURN sum
ENDFUNCTION

DECLARE arr: ARRAY[0: 10] OF INTEGER
DECLARE i: INTEGER
FOR i <- 0 TO 10
    arr[i] <- i
NEXT i

OUTPUT sum(arr)

 (88) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
  SyntaxError {message: 'Expected type', line: 1, startColumn: 18, endColumn: 23}
(anonymous) @ bundle.js:2666
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
rejected @ bundle.js:1901
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
 (88) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
  SyntaxError {message: 'Expected type', line: 1, startColumn: 18, endColumn: 23}
(anonymous) @ bundle.js:2677
rejected @ bundle.js:1901
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
rejected @ bundle.js:1901
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
 39
 PROCEDURE print(str: STRING)
    OUTPUT str
ENDPROCEDURE

CALL print("procedure")

 (21) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(2)}
 (21) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(2), global: Scope}
 ProgramNode {kind: 0, body: Array(2), global: Scope}
 (21) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(2)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (data $0 (i32.const 0) "procedure\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $print (param $0 i32)
  (block $__callablePrologue
   (i32.store align=1
    (global.get $__stackTop)
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (global.get $__stackTop)
   )
  )
  (block $__paramInit
   (i32.store align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 0)
    )
    (local.get $0)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
  )
  (call $logString
   (i32.load align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 0)
    )
   )
  )
  (block $__callableEpilogue
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
  )
 )
 (func $__main
  (call $print
   (i32.const 0)
  )
 )
)

 procedure
 40
 OUTPUT LENGTH("Happy Days") + LENGTH("Hi")
 (11) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1)}
 (11) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1), global: Scope}
 ProgramNode {kind: 0, body: Array(1), global: Scope}
 (11) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (data $0 (i32.const 0) "Happy Days\00")
 (data $1 (i32.const 11) "Hi\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (call $logInteger
   (i32.add
    (call $LENGTH
     (i32.const 0)
    )
    (call $LENGTH
     (i32.const 11)
    )
   )
  )
 )
)

 12
 41
 OUTPUT LENGTH("你好")
 (6) [Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1)}
 (6) [Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1), global: Scope}
 ProgramNode {kind: 0, body: Array(1), global: Scope}
 (6) [Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(1)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (data $0 (i32.const 0) "\e4\bd\a0\e5\a5\bd\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (call $logInteger
   (call $LENGTH
    (i32.const 0)
   )
  )
 )
)

 2
 42
 DECLARE i: ARRAY[2: 5] OF INTEGER

i[2] <- 9
i[3] <- 10
i[4] <- 3

OUTPUT i[2] + i[3] + i[4]

 (52) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (52) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 (52) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 2)
        (i32.const 2)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 9)
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 3)
        (i32.const 2)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 10)
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 4)
        (i32.const 2)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 3)
  )
  (call $logInteger
   (i32.add
    (i32.add
     (i32.load align=1
      (i32.add
       (i32.const 0)
       (i32.mul
        (i32.add
         (i32.const 0)
         (i32.mul
          (i32.sub
           (i32.const 2)
           (i32.const 2)
          )
          (i32.const 1)
         )
        )
        (i32.const 4)
       )
      )
     )
     (i32.load align=1
      (i32.add
       (i32.const 0)
       (i32.mul
        (i32.add
         (i32.const 0)
         (i32.mul
          (i32.sub
           (i32.const 3)
           (i32.const 2)
          )
          (i32.const 1)
         )
        )
        (i32.const 4)
       )
      )
     )
    )
    (i32.load align=1
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.add
        (i32.const 0)
        (i32.mul
         (i32.sub
          (i32.const 4)
          (i32.const 2)
         )
         (i32.const 1)
        )
       )
       (i32.const 4)
      )
     )
    )
   )
  )
 )
)

 22
 43
 DECLARE arr: ARRAY[0: 3, 0: 3] OF INTEGER
DECLARE i: INTEGER
DECLARE j: INTEGER

FOR i <- 0 TO 3
    FOR j <- 0 TO 3
        arr[i, j] <- i + j
    NEXT j
NEXT i

DECLARE sum: INTEGER
sum <- 0
FOR i <- 0 TO 3
    FOR j <- 0 TO 3
        sum <- sum + arr[i, j]
    NEXT j
NEXT i

OUTPUT sum

 (104) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(8)}
 (104) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(8), global: Scope}
 ProgramNode {kind: 0, body: Array(8), global: Scope}
 (104) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(8)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (block
  )
  (block
   (i32.store align=1
    (i32.const 64)
    (i32.const 0)
   )
   (loop $2
    (if
     (i32.ge_s
      (i32.const 3)
      (i32.load align=1
       (i32.const 64)
      )
     )
     (block
      (block
       (i32.store align=1
        (i32.const 68)
        (i32.const 0)
       )
       (loop $1
        (if
         (i32.ge_s
          (i32.const 3)
          (i32.load align=1
           (i32.const 68)
          )
         )
         (block
          (i32.store align=1
           (i32.add
            (i32.const 0)
            (i32.mul
             (i32.add
              (i32.add
               (i32.const 0)
               (i32.mul
                (i32.sub
                 (i32.load align=1
                  (i32.const 64)
                 )
                 (i32.const 0)
                )
                (i32.const 4)
               )
              )
              (i32.mul
               (i32.sub
                (i32.load align=1
                 (i32.const 68)
                )
                (i32.const 0)
               )
               (i32.const 1)
              )
             )
             (i32.const 4)
            )
           )
           (i32.add
            (i32.load align=1
             (i32.const 64)
            )
            (i32.load align=1
             (i32.const 68)
            )
           )
          )
          (i32.store align=1
           (i32.const 68)
           (i32.add
            (i32.load align=1
             (i32.const 68)
            )
            (i32.const 1)
           )
          )
          (br $1)
         )
        )
       )
      )
      (i32.store align=1
       (i32.const 64)
       (i32.add
        (i32.load align=1
         (i32.const 64)
        )
        (i32.const 1)
       )
      )
      (br $2)
     )
    )
   )
  )
  (block
  )
  (i32.store align=1
   (i32.const 72)
   (i32.const 0)
  )
  (block
   (i32.store align=1
    (i32.const 64)
    (i32.const 0)
   )
   (loop $4
    (if
     (i32.ge_s
      (i32.const 3)
      (i32.load align=1
       (i32.const 64)
      )
     )
     (block
      (block
       (i32.store align=1
        (i32.const 68)
        (i32.const 0)
       )
       (loop $3
        (if
         (i32.ge_s
          (i32.const 3)
          (i32.load align=1
           (i32.const 68)
          )
         )
         (block
          (i32.store align=1
           (i32.const 72)
           (i32.add
            (i32.load align=1
             (i32.const 72)
            )
            (i32.load align=1
             (i32.add
              (i32.const 0)
              (i32.mul
               (i32.add
                (i32.add
                 (i32.const 0)
                 (i32.mul
                  (i32.sub
                   (i32.load align=1
                    (i32.const 64)
                   )
                   (i32.const 0)
                  )
                  (i32.const 4)
                 )
                )
                (i32.mul
                 (i32.sub
                  (i32.load align=1
                   (i32.const 68)
                  )
                  (i32.const 0)
                 )
                 (i32.const 1)
                )
               )
               (i32.const 4)
              )
             )
            )
           )
          )
          (i32.store align=1
           (i32.const 68)
           (i32.add
            (i32.load align=1
             (i32.const 68)
            )
            (i32.const 1)
           )
          )
          (br $3)
         )
        )
       )
      )
      (i32.store align=1
       (i32.const 64)
       (i32.add
        (i32.load align=1
         (i32.const 64)
        )
        (i32.const 1)
       )
      )
      (br $4)
     )
    )
   )
  )
  (call $logInteger
   (i32.load align=1
    (i32.const 72)
   )
  )
 )
)

 48
 44
 DECLARE arr: ARRAY[0: 3, 0: 3, 0: 3] OF INTEGER
DECLARE i: INTEGER
DECLARE j: INTEGER
DECLARE k: INTEGER

FOR i <- 0 TO 3
    FOR j <- 0 TO 3
        FOR k <- 0 TO 3
            arr[i, j, k] <- i + j + k
        NEXT k
    NEXT j
NEXT i

DECLARE sum: INTEGER
sum <- 0
FOR i <- 0 TO 3
    FOR j <- 0 TO 3
        FOR k <- 0 TO 3
            sum <- sum + arr[i, j, k]
        NEXT k
    NEXT j
NEXT i

OUTPUT sum

 (139) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(9)}
 (139) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(9), global: Scope}
 ProgramNode {kind: 0, body: Array(9), global: Scope}
 (139) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(9)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (block
  )
  (block
  )
  (block
   (i32.store align=1
    (i32.const 256)
    (i32.const 0)
   )
   (loop $3
    (if
     (i32.ge_s
      (i32.const 3)
      (i32.load align=1
       (i32.const 256)
      )
     )
     (block
      (block
       (i32.store align=1
        (i32.const 260)
        (i32.const 0)
       )
       (loop $2
        (if
         (i32.ge_s
          (i32.const 3)
          (i32.load align=1
           (i32.const 260)
          )
         )
         (block
          (block
           (i32.store align=1
            (i32.const 264)
            (i32.const 0)
           )
           (loop $1
            (if
             (i32.ge_s
              (i32.const 3)
              (i32.load align=1
               (i32.const 264)
              )
             )
             (block
              (i32.store align=1
               (i32.add
                (i32.const 0)
                (i32.mul
                 (i32.add
                  (i32.add
                   (i32.add
                    (i32.const 0)
                    (i32.mul
                     (i32.sub
                      (i32.load align=1
                       (i32.const 256)
                      )
                      (i32.const 0)
                     )
                     (i32.const 16)
                    )
                   )
                   (i32.mul
                    (i32.sub
                     (i32.load align=1
                      (i32.const 260)
                     )
                     (i32.const 0)
                    )
                    (i32.const 4)
                   )
                  )
                  (i32.mul
                   (i32.sub
                    (i32.load align=1
                     (i32.const 264)
                    )
                    (i32.const 0)
                   )
                   (i32.const 1)
                  )
                 )
                 (i32.const 4)
                )
               )
               (i32.add
                (i32.add
                 (i32.load align=1
                  (i32.const 256)
                 )
                 (i32.load align=1
                  (i32.const 260)
                 )
                )
                (i32.load align=1
                 (i32.const 264)
                )
               )
              )
              (i32.store align=1
               (i32.const 264)
               (i32.add
                (i32.load align=1
                 (i32.const 264)
                )
                (i32.const 1)
               )
              )
              (br $1)
             )
            )
           )
          )
          (i32.store align=1
           (i32.const 260)
           (i32.add
            (i32.load align=1
             (i32.const 260)
            )
            (i32.const 1)
           )
          )
          (br $2)
         )
        )
       )
      )
      (i32.store align=1
       (i32.const 256)
       (i32.add
        (i32.load align=1
         (i32.const 256)
        )
        (i32.const 1)
       )
      )
      (br $3)
     )
    )
   )
  )
  (block
  )
  (i32.store align=1
   (i32.const 268)
   (i32.const 0)
  )
  (block
   (i32.store align=1
    (i32.const 256)
    (i32.const 0)
   )
   (loop $6
    (if
     (i32.ge_s
      (i32.const 3)
      (i32.load align=1
       (i32.const 256)
      )
     )
     (block
      (block
       (i32.store align=1
        (i32.const 260)
        (i32.const 0)
       )
       (loop $5
        (if
         (i32.ge_s
          (i32.const 3)
          (i32.load align=1
           (i32.const 260)
          )
         )
         (block
          (block
           (i32.store align=1
            (i32.const 264)
            (i32.const 0)
           )
           (loop $4
            (if
             (i32.ge_s
              (i32.const 3)
              (i32.load align=1
               (i32.const 264)
              )
             )
             (block
              (i32.store align=1
               (i32.const 268)
               (i32.add
                (i32.load align=1
                 (i32.const 268)
                )
                (i32.load align=1
                 (i32.add
                  (i32.const 0)
                  (i32.mul
                   (i32.add
                    (i32.add
                     (i32.add
                      (i32.const 0)
                      (i32.mul
                       (i32.sub
                        (i32.load align=1
                         (i32.const 256)
                        )
                        (i32.const 0)
                       )
                       (i32.const 16)
                      )
                     )
                     (i32.mul
                      (i32.sub
                       (i32.load align=1
                        (i32.const 260)
                       )
                       (i32.const 0)
                      )
                      (i32.const 4)
                     )
                    )
                    (i32.mul
                     (i32.sub
                      (i32.load align=1
                       (i32.const 264)
                      )
                      (i32.const 0)
                     )
                     (i32.const 1)
                    )
                   )
                   (i32.const 4)
                  )
                 )
                )
               )
              )
              (i32.store align=1
               (i32.const 264)
               (i32.add
                (i32.load align=1
                 (i32.const 264)
                )
                (i32.const 1)
               )
              )
              (br $4)
             )
            )
           )
          )
          (i32.store align=1
           (i32.const 260)
           (i32.add
            (i32.load align=1
             (i32.const 260)
            )
            (i32.const 1)
           )
          )
          (br $5)
         )
        )
       )
      )
      (i32.store align=1
       (i32.const 256)
       (i32.add
        (i32.load align=1
         (i32.const 256)
        )
        (i32.const 1)
       )
      )
      (br $6)
     )
    )
   )
  )
  (call $logInteger
   (i32.load align=1
    (i32.const 268)
   )
  )
 )
)

 288
 45
 DECLARE arr: ARRAY[1: 4, 1: 4] OF INTEGER
DECLARE i: INTEGER
DECLARE j: INTEGER

FOR i <- 1 TO 4
    FOR j <- 1 TO 4
        arr[i, j] <- i + j
    NEXT j
NEXT i

DECLARE sum: INTEGER
sum <- 0
FOR i <- 1 TO 4
    FOR j <- 1 TO 4
        sum <- sum + arr[i, j]
    NEXT j
NEXT i

OUTPUT sum

 (104) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(8)}
 (104) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(8), global: Scope}
 ProgramNode {kind: 0, body: Array(8), global: Scope}
 (104) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(8)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (block
  )
  (block
   (i32.store align=1
    (i32.const 64)
    (i32.const 1)
   )
   (loop $2
    (if
     (i32.ge_s
      (i32.const 4)
      (i32.load align=1
       (i32.const 64)
      )
     )
     (block
      (block
       (i32.store align=1
        (i32.const 68)
        (i32.const 1)
       )
       (loop $1
        (if
         (i32.ge_s
          (i32.const 4)
          (i32.load align=1
           (i32.const 68)
          )
         )
         (block
          (i32.store align=1
           (i32.add
            (i32.const 0)
            (i32.mul
             (i32.add
              (i32.add
               (i32.const 0)
               (i32.mul
                (i32.sub
                 (i32.load align=1
                  (i32.const 64)
                 )
                 (i32.const 1)
                )
                (i32.const 4)
               )
              )
              (i32.mul
               (i32.sub
                (i32.load align=1
                 (i32.const 68)
                )
                (i32.const 1)
               )
               (i32.const 1)
              )
             )
             (i32.const 4)
            )
           )
           (i32.add
            (i32.load align=1
             (i32.const 64)
            )
            (i32.load align=1
             (i32.const 68)
            )
           )
          )
          (i32.store align=1
           (i32.const 68)
           (i32.add
            (i32.load align=1
             (i32.const 68)
            )
            (i32.const 1)
           )
          )
          (br $1)
         )
        )
       )
      )
      (i32.store align=1
       (i32.const 64)
       (i32.add
        (i32.load align=1
         (i32.const 64)
        )
        (i32.const 1)
       )
      )
      (br $2)
     )
    )
   )
  )
  (block
  )
  (i32.store align=1
   (i32.const 72)
   (i32.const 0)
  )
  (block
   (i32.store align=1
    (i32.const 64)
    (i32.const 1)
   )
   (loop $4
    (if
     (i32.ge_s
      (i32.const 4)
      (i32.load align=1
       (i32.const 64)
      )
     )
     (block
      (block
       (i32.store align=1
        (i32.const 68)
        (i32.const 1)
       )
       (loop $3
        (if
         (i32.ge_s
          (i32.const 4)
          (i32.load align=1
           (i32.const 68)
          )
         )
         (block
          (i32.store align=1
           (i32.const 72)
           (i32.add
            (i32.load align=1
             (i32.const 72)
            )
            (i32.load align=1
             (i32.add
              (i32.const 0)
              (i32.mul
               (i32.add
                (i32.add
                 (i32.const 0)
                 (i32.mul
                  (i32.sub
                   (i32.load align=1
                    (i32.const 64)
                   )
                   (i32.const 1)
                  )
                  (i32.const 4)
                 )
                )
                (i32.mul
                 (i32.sub
                  (i32.load align=1
                   (i32.const 68)
                  )
                  (i32.const 1)
                 )
                 (i32.const 1)
                )
               )
               (i32.const 4)
              )
             )
            )
           )
          )
          (i32.store align=1
           (i32.const 68)
           (i32.add
            (i32.load align=1
             (i32.const 68)
            )
            (i32.const 1)
           )
          )
          (br $3)
         )
        )
       )
      )
      (i32.store align=1
       (i32.const 64)
       (i32.add
        (i32.load align=1
         (i32.const 64)
        )
        (i32.const 1)
       )
      )
      (br $4)
     )
    )
   )
  )
  (call $logInteger
   (i32.load align=1
    (i32.const 72)
   )
  )
 )
)

 80
 46
 PROCEDURE temp()
    DECLARE arr: ARRAY[0: 3, 0: 3, 0: 3] OF INTEGER
    DECLARE i: INTEGER
    DECLARE j: INTEGER
    DECLARE k: INTEGER

    FOR i <- 0 TO 3
        FOR j <- 0 TO 3
            FOR k <- 0 TO 3
                arr[i, j, k] <- i + j + k
            NEXT k
        NEXT j
    NEXT i

    DECLARE sum: INTEGER
    sum <- 0
    FOR i <- 0 TO 3
        FOR j <- 0 TO 3
            FOR k <- 0 TO 3
                sum <- sum + arr[i, j, k]
            NEXT k
        NEXT j
    NEXT i
    OUTPUT sum
ENDPROCEDURE

CALL temp()

 (151) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(2)}
 (151) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(2), global: Scope}
 ProgramNode {kind: 0, body: Array(2), global: Scope}
 (151) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(2)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $none_=>_none (func))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $temp
  (block $__callablePrologue
   (i32.store align=1
    (global.get $__stackTop)
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (global.get $__stackTop)
   )
  )
  (block $__paramInit
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 0)
    )
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 256)
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 4)
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 4)
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 4)
   )
  )
  (block
   (i32.store align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 256)
    )
    (i32.const 0)
   )
   (loop $3
    (if
     (i32.ge_s
      (i32.const 3)
      (i32.load align=1
       (i32.add
        (global.get $__stackBase)
        (i32.const 256)
       )
      )
     )
     (block
      (block
       (i32.store align=1
        (i32.add
         (global.get $__stackBase)
         (i32.const 260)
        )
        (i32.const 0)
       )
       (loop $2
        (if
         (i32.ge_s
          (i32.const 3)
          (i32.load align=1
           (i32.add
            (global.get $__stackBase)
            (i32.const 260)
           )
          )
         )
         (block
          (block
           (i32.store align=1
            (i32.add
             (global.get $__stackBase)
             (i32.const 264)
            )
            (i32.const 0)
           )
           (loop $1
            (if
             (i32.ge_s
              (i32.const 3)
              (i32.load align=1
               (i32.add
                (global.get $__stackBase)
                (i32.const 264)
               )
              )
             )
             (block
              (i32.store align=1
               (i32.add
                (i32.add
                 (global.get $__stackBase)
                 (i32.const 0)
                )
                (i32.mul
                 (i32.add
                  (i32.add
                   (i32.add
                    (i32.const 0)
                    (i32.mul
                     (i32.sub
                      (i32.load align=1
                       (i32.add
                        (global.get $__stackBase)
                        (i32.const 256)
                       )
                      )
                      (i32.const 0)
                     )
                     (i32.const 16)
                    )
                   )
                   (i32.mul
                    (i32.sub
                     (i32.load align=1
                      (i32.add
                       (global.get $__stackBase)
                       (i32.const 260)
                      )
                     )
                     (i32.const 0)
                    )
                    (i32.const 4)
                   )
                  )
                  (i32.mul
                   (i32.sub
                    (i32.load align=1
                     (i32.add
                      (global.get $__stackBase)
                      (i32.const 264)
                     )
                    )
                    (i32.const 0)
                   )
                   (i32.const 1)
                  )
                 )
                 (i32.const 4)
                )
               )
               (i32.add
                (i32.add
                 (i32.load align=1
                  (i32.add
                   (global.get $__stackBase)
                   (i32.const 256)
                  )
              
 288
 47
 FUNCTION temp() RETURNS INTEGER
    DECLARE arr: ARRAY[0: 3, 0: 3, 0: 3] OF INTEGER
    DECLARE i: INTEGER
    DECLARE j: INTEGER
    DECLARE k: INTEGER

    FOR i <- 0 TO 3
        FOR j <- 0 TO 3
            FOR k <- 0 TO 3
                arr[i, j, k] <- i + j + k
            NEXT k
        NEXT j
    NEXT i

    DECLARE sum: INTEGER
    sum <- 0
    FOR i <- 0 TO 3
        FOR j <- 0 TO 3
            FOR k <- 0 TO 3
                sum <- sum + arr[i, j, k]
            NEXT k
        NEXT j
    NEXT i
    RETURN sum
ENDFUNCTION

OUTPUT temp()

 (153) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(2)}
 (153) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(2), global: Scope}
 ProgramNode {kind: 0, body: Array(2), global: Scope}
 (153) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, …]
 ProgramNode {kind: 0, body: Array(2)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $temp (result i32)
  (local $0 i32)
  (block $__callablePrologue
   (i32.store align=1
    (global.get $__stackTop)
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (global.get $__stackTop)
   )
  )
  (block $__paramInit
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 0)
    )
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 256)
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 4)
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 4)
   )
  )
  (global.set $__stackTop
   (i32.add
    (global.get $__stackTop)
    (i32.const 4)
   )
  )
  (block
   (i32.store align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 256)
    )
    (i32.const 0)
   )
   (loop $3
    (if
     (i32.ge_s
      (i32.const 3)
      (i32.load align=1
       (i32.add
        (global.get $__stackBase)
        (i32.const 256)
       )
      )
     )
     (block
      (block
       (i32.store align=1
        (i32.add
         (global.get $__stackBase)
         (i32.const 260)
        )
        (i32.const 0)
       )
       (loop $2
        (if
         (i32.ge_s
          (i32.const 3)
          (i32.load align=1
           (i32.add
            (global.get $__stackBase)
            (i32.const 260)
           )
          )
         )
         (block
          (block
           (i32.store align=1
            (i32.add
             (global.get $__stackBase)
             (i32.const 264)
            )
            (i32.const 0)
           )
           (loop $1
            (if
             (i32.ge_s
              (i32.const 3)
              (i32.load align=1
               (i32.add
                (global.get $__stackBase)
                (i32.const 264)
               )
              )
             )
             (block
              (i32.store align=1
               (i32.add
                (i32.add
                 (global.get $__stackBase)
                 (i32.const 0)
                )
                (i32.mul
                 (i32.add
                  (i32.add
                   (i32.add
                    (i32.const 0)
                    (i32.mul
                     (i32.sub
                      (i32.load align=1
                       (i32.add
                        (global.get $__stackBase)
                        (i32.const 256)
                       )
                      )
                      (i32.const 0)
                     )
                     (i32.const 16)
                    )
                   )
                   (i32.mul
                    (i32.sub
                     (i32.load align=1
                      (i32.add
                       (global.get $__stackBase)
                       (i32.const 260)
                      )
                     )
                     (i32.const 0)
                    )
                    (i32.const 4)
                   )
                  )
                  (i32.mul
                   (i32.sub
                    (i32.load align=1
                     (i32.add
                      (global.get $__stackBase)
                      (i32.const 264)
                     )
                    )
                    (i32.const 0)
                   )
                   (i32.const 1)
                  )
                 )
                 (i32.const 4)
                )
               )
               (i32.add
                (i32.add
                 (i32.load align=1
                  (i32.add
                   (global.get $__stackBase
 288
 48
 DECLARE i: STRING
DECLARE j: STRING
i <- "Happy Days"
j <- "Not happy"

OUTPUT LENGTH(i) + LENGTH(j)

 (31) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (31) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 (31) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (data $0 (i32.const 8) "Happy Days\00")
 (data $1 (i32.const 19) "Not happy\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (i32.store align=1
   (i32.const 0)
   (i32.const 8)
  )
  (i32.store align=1
   (i32.const 4)
   (i32.const 19)
  )
  (call $logInteger
   (i32.add
    (call $LENGTH
     (i32.load align=1
      (i32.const 0)
     )
    )
    (call $LENGTH
     (i32.load align=1
      (i32.const 4)
     )
    )
   )
  )
 )
)

 19
 49
 TYPE nums 
    DECLARE i: INTEGER
    DECLARE j: INTEGER
ENDTYPE
DECLARE k: nums
k.i <- 9
k.j <- 3

OUTPUT k.i + k.j

 (43) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (43) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 (43) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.const 0)
   )
   (i32.const 9)
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.const 4)
   )
   (i32.const 3)
  )
  (call $logInteger
   (i32.add
    (i32.load align=1
     (i32.add
      (i32.const 0)
      (i32.const 0)
     )
    )
    (i32.load align=1
     (i32.add
      (i32.const 0)
      (i32.const 4)
     )
    )
   )
  )
 )
)

 12
 50
 TYPE nums 
    DECLARE i: ARRAY[0: 7] OF INTEGER
    DECLARE j: INTEGER
ENDTYPE
DECLARE k: nums
k.i[0] <- 8
k.j <- 3

OUTPUT k.i[0] + k.j

 (56) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (56) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 (56) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (i32.store align=1
   (i32.add
    (i32.add
     (i32.const 0)
     (i32.const 0)
    )
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 0)
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 8)
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.const 32)
   )
   (i32.const 3)
  )
  (call $logInteger
   (i32.add
    (i32.load align=1
     (i32.add
      (i32.add
       (i32.const 0)
       (i32.const 0)
      )
      (i32.mul
       (i32.add
        (i32.const 0)
        (i32.mul
         (i32.sub
          (i32.const 0)
          (i32.const 0)
         )
         (i32.const 1)
        )
       )
       (i32.const 4)
      )
     )
    )
    (i32.load align=1
     (i32.add
      (i32.const 0)
      (i32.const 32)
     )
    )
   )
  )
 )
)

 11
 51
 TYPE nums 
    DECLARE i: ARRAY[0: 7] OF INTEGER
    DECLARE j: INTEGER
ENDTYPE

DECLARE k: ARRAY[0: 7] OF nums
k[0].i[0] <- 8
k[0].j <- 9

OUTPUT k[0].i[0] + k[0].j

 (76) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (76) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 ProgramNode {kind: 0, body: Array(5), global: Scope}
 (76) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(5)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (i32.store align=1
   (i32.add
    (i32.add
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.add
        (i32.const 0)
        (i32.mul
         (i32.sub
          (i32.const 0)
          (i32.const 0)
         )
         (i32.const 1)
        )
       )
       (i32.const 36)
      )
     )
     (i32.const 0)
    )
    (i32.mul
     (i32.add
      (i32.const 0)
      (i32.mul
       (i32.sub
        (i32.const 0)
        (i32.const 0)
       )
       (i32.const 1)
      )
     )
     (i32.const 4)
    )
   )
   (i32.const 8)
  )
  (i32.store align=1
   (i32.add
    (i32.add
     (i32.const 0)
     (i32.mul
      (i32.add
       (i32.const 0)
       (i32.mul
        (i32.sub
         (i32.const 0)
         (i32.const 0)
        )
        (i32.const 1)
       )
      )
      (i32.const 36)
     )
    )
    (i32.const 32)
   )
   (i32.const 9)
  )
  (call $logInteger
   (i32.add
    (i32.load align=1
     (i32.add
      (i32.add
       (i32.add
        (i32.const 0)
        (i32.mul
         (i32.add
          (i32.const 0)
          (i32.mul
           (i32.sub
            (i32.const 0)
            (i32.const 0)
           )
           (i32.const 1)
          )
         )
         (i32.const 36)
        )
       )
       (i32.const 0)
      )
      (i32.mul
       (i32.add
        (i32.const 0)
        (i32.mul
         (i32.sub
          (i32.const 0)
          (i32.const 0)
         )
         (i32.const 1)
        )
       )
       (i32.const 4)
      )
     )
    )
    (i32.load align=1
     (i32.add
      (i32.add
       (i32.const 0)
       (i32.mul
        (i32.add
         (i32.const 0)
         (i32.mul
          (i32.sub
           (i32.const 0)
           (i32.const 0)
          )
          (i32.const 1)
         )
        )
        (i32.const 36)
       )
      )
      (i32.const 32)
     )
    )
   )
  )
 )
)

 17
 52
 TYPE intptr = ^INTEGER
DECLARE i: INTEGER
DECLARE a: intptr

i <- 19
a <- ^i
OUTPUT a^

 (31) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(6)}
 (31) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(6), global: Scope}
 ProgramNode {kind: 0, body: Array(6), global: Scope}
 (31) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(6)}
 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (block
  )
  (i32.store align=1
   (i32.const 0)
   (i32.const 19)
  )
  (i32.store align=1
   (i32.const 4)
   (i32.const 0)
  )
  (call $logInteger
   (i32.load align=1
    (i32.load align=1
     (i32.const 4)
    )
   )
  )
 )
)

 19
 53
 TYPE intptr = ^INTEGER
DECLARE i: INTEGER
DECLARE a: intptr

i <- 21
a <- ^^^^i^^^
OUTPUT a^

 (37) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(6)}
  RuntimeError {msg: 'Cannot dereference none POINTER types'}
(anonymous) @ bundle.js:2666
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
rejected @ bundle.js:1901
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
rejected @ bundle.js:1901
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
 (37) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
 ProgramNode {kind: 0, body: Array(6)}
  RuntimeError {msg: 'Cannot dereference none POINTER types'}
(anonymous) @ bundle.js:2677
rejected @ bundle.js:1901
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
rejected @ bundle.js:1901
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
rejected @ bundle.js:1901
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
Promise.then(异步)
step @ bundle.js:1902
fulfilled @ bundle.js:1900
 54
 TYPE intptr = ^INTEGER
TYPE intptrptr = ^intptr

DECLARE i: INTEGER
DECLARE a: intptr
DECLARE b: intptrptr

i <- 34
a <- ^i
b <- ^a
OUTPUT b^^

 (49) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(9)}
compiler.ts:26 (49) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:27 ProgramNode {kind: 0, body: Array(9), global: Scope}
compiler.ts:28 ProgramNode {kind: 0, body: Array(9), global: Scope}
compiler.ts:19 (49) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(9)}
compiler.ts:82 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (block
  )
  (block
  )
  (block
  )
  (i32.store align=1
   (i32.const 0)
   (i32.const 34)
  )
  (i32.store align=1
   (i32.const 4)
   (i32.const 0)
  )
  (i32.store align=1
   (i32.const 8)
   (i32.const 4)
  )
  (call $logInteger
   (i32.load align=1
    (i32.load align=1
     (i32.load align=1
      (i32.const 8)
     )
    )
   )
  )
 )
)

compiler.ts:95 34
index.ts:818 55
index.ts:819 TYPE nums 
    DECLARE i: INTEGER
    DECLARE j: REAL
ENDTYPE
DECLARE k: nums
k.i <- 9
k.j <- 3.88

OUTPUT k.i + k.j

compiler.ts:19 (43) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(5)}
compiler.ts:26 (43) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:27 ProgramNode {kind: 0, body: Array(5), global: Scope}
compiler.ts:28 ProgramNode {kind: 0, body: Array(5), global: Scope}
compiler.ts:19 (43) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(5)}
compiler.ts:82 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.const 0)
   )
   (i32.const 9)
  )
  (f64.store align=1
   (i32.add
    (i32.const 0)
    (i32.const 4)
   )
   (f64.const 3.88)
  )
  (call $logReal
   (f64.add
    (f64.convert_i32_s
     (i32.load align=1
      (i32.add
       (i32.const 0)
       (i32.const 0)
      )
     )
    )
    (f64.load align=1
     (i32.add
      (i32.const 0)
      (i32.const 4)
     )
    )
   )
  )
 )
)

compiler.ts:99 12.879999999999999
index.ts:818 56
index.ts:819 TYPE nums
    DECLARE j: STRING
ENDTYPE
DECLARE k: nums
k.j <- "Type test"

OUTPUT k.j

compiler.ts:19 (28) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(4)}
compiler.ts:26 (28) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:27 ProgramNode {kind: 0, body: Array(4), global: Scope}
compiler.ts:28 ProgramNode {kind: 0, body: Array(4), global: Scope}
compiler.ts:19 (28) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(4)}
compiler.ts:82 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (data $0 (i32.const 4) "Type test\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (i32.store align=1
   (i32.add
    (i32.const 0)
    (i32.const 0)
   )
   (i32.const 4)
  )
  (call $logString
   (i32.load align=1
    (i32.add
     (i32.const 0)
     (i32.const 0)
    )
   )
  )
 )
)

compiler.ts:110 Type test
index.ts:818 57
index.ts:819 TYPE nums
    DECLARE j: STRING
ENDTYPE

TYPE numptr = ^nums

DECLARE i: nums
DECLARE k: numptr
k <- ^i
(k^).j <- "test"

OUTPUT (k^).j

compiler.ts:19 (52) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(7)}
compiler.ts:26 (52) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:27 ProgramNode {kind: 0, body: Array(7), global: Scope}
compiler.ts:28 ProgramNode {kind: 0, body: Array(7), global: Scope}
compiler.ts:19 (52) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(7)}
compiler.ts:82 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (data $0 (i32.const 8) "test\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (block
  )
  (block
  )
  (i32.store align=1
   (i32.const 4)
   (i32.const 0)
  )
  (i32.store align=1
   (i32.add
    (i32.load align=1
     (i32.const 4)
    )
    (i32.const 0)
   )
   (i32.const 8)
  )
  (call $logString
   (i32.load align=1
    (i32.add
     (i32.load align=1
      (i32.const 4)
     )
     (i32.const 0)
    )
   )
  )
 )
)

compiler.ts:110 test
index.ts:818 58
index.ts:819 TYPE intptr = ^INTEGER
DECLARE a: intptr
DECLARE b: INTEGER

a <- ^b
a^ <- 4
OUTPUT a^

compiler.ts:19 (32) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(6)}
compiler.ts:26 (32) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:27 ProgramNode {kind: 0, body: Array(6), global: Scope}
compiler.ts:28 ProgramNode {kind: 0, body: Array(6), global: Scope}
compiler.ts:19 (32) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(6)}
compiler.ts:82 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (block
  )
  (i32.store align=1
   (i32.const 0)
   (i32.const 4)
  )
  (i32.store align=1
   (i32.load align=1
    (i32.const 0)
   )
   (i32.const 4)
  )
  (call $logInteger
   (i32.load align=1
    (i32.load align=1
     (i32.const 0)
    )
   )
  )
 )
)

compiler.ts:95 4
index.ts:818 59
index.ts:819 TYPE intptr = ^INTEGER

FUNCTION deref(i: intptr) RETURNS INTEGER
    RETURN i^
ENDFUNCTION

DECLARE a: INTEGER
a <- 33
OUTPUT deref(^a)

compiler.ts:19 (41) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(5)}
compiler.ts:26 (41) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:27 ProgramNode {kind: 0, body: Array(5), global: Scope}
compiler.ts:28 ProgramNode {kind: 0, body: Array(5), global: Scope}
compiler.ts:19 (41) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(5)}
compiler.ts:82 (module
 (type $i32_=>_none (func (param i32)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $f64_=>_none (func (param f64)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $deref (param $0 i32) (result i32)
  (local $1 i32)
  (block $__callablePrologue
   (i32.store align=1
    (global.get $__stackTop)
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (global.get $__stackTop)
   )
  )
  (block $__paramInit
   (i32.store align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 0)
    )
    (local.get $0)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
  )
  (block
   (local.set $1
    (i32.load align=1
     (i32.load align=1
      (i32.add
       (global.get $__stackBase)
       (i32.const 0)
      )
     )
    )
   )
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
   (return
    (local.get $1)
   )
  )
  (block $__callableEpilogue
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (i32.store align=1
   (i32.const 0)
   (i32.const 33)
  )
  (call $logInteger
   (call $deref
    (i32.const 0)
   )
  )
 )
)

compiler.ts:95 33
index.ts:818 60
index.ts:819 TYPE intptr = ^INTEGER

PROCEDURE change(i: intptr)
    i^ <- 31
ENDPROCEDURE

DECLARE a: INTEGER
a <- 33
CALL change(^a)
OUTPUT a

compiler.ts:19 (43) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(6)}
compiler.ts:26 (43) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:27 ProgramNode {kind: 0, body: Array(6), global: Scope}
compiler.ts:28 ProgramNode {kind: 0, body: Array(6), global: Scope}
compiler.ts:19 (43) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(6)}
compiler.ts:82 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $change (param $0 i32)
  (block $__callablePrologue
   (i32.store align=1
    (global.get $__stackTop)
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (global.get $__stackTop)
   )
  )
  (block $__paramInit
   (i32.store align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 0)
    )
    (local.get $0)
   )
   (global.set $__stackTop
    (i32.add
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
  )
  (i32.store align=1
   (i32.load align=1
    (i32.add
     (global.get $__stackBase)
     (i32.const 0)
    )
   )
   (i32.const 31)
  )
  (block $__callableEpilogue
   (global.set $__stackTop
    (global.get $__stackBase)
   )
   (global.set $__stackTop
    (i32.sub
     (global.get $__stackTop)
     (i32.const 4)
    )
   )
   (global.set $__stackBase
    (i32.load align=1
     (global.get $__stackTop)
    )
   )
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (i32.store align=1
   (i32.const 0)
   (i32.const 33)
  )
  (call $change
   (i32.const 0)
  )
  (call $logInteger
   (i32.load align=1
    (i32.const 0)
   )
  )
 )
)

compiler.ts:95 31
index.ts:818 61
index.ts:819 TYPE strptr = ^STRING

DECLARE a: STRING
DECLARE b: strptr

a <- "Hi"
b <- ^a
OUTPUT b^

compiler.ts:19 (32) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(6)}
compiler.ts:26 (32) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:27 ProgramNode {kind: 0, body: Array(6), global: Scope}
compiler.ts:28 ProgramNode {kind: 0, body: Array(6), global: Scope}
compiler.ts:19 (32) [Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token, Token]
compiler.ts:22 ProgramNode {kind: 0, body: Array(6)}
compiler.ts:82 (module
 (type $i32_=>_none (func (param i32)))
 (type $f64_=>_none (func (param f64)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $none_=>_none (func))
 (import "env" "buffer" (memory $0 0 65536))
 (import "env" "logInteger" (func $logInteger (param i32)))
 (import "env" "logReal" (func $logReal (param f64)))
 (import "env" "logChar" (func $logChar (param i32)))
 (import "env" "logString" (func $logString (param i32)))
 (global $__stackTop (mut i32) (i32.const 65536))
 (global $__stackBase (mut i32) (i32.const 65536))
 (data $0 (i32.const 8) "Hi\00")
 (export "main" (func $__main))
 (start $__main)
 (func $LENGTH (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local.set $1
   (local.get $0)
  )
  (local.set $2
   (i32.const 0)
  )
  (loop $0
   (if
    (i32.load8_u
     (local.get $1)
    )
    (block
     (if
      (i32.ne
       (i32.and
        (i32.load8_u
         (local.get $1)
        )
        (i32.const 192)
       )
       (i32.const 128)
      )
      (local.set $2
       (i32.add
        (local.get $2)
        (i32.const 1)
       )
      )
     )
     (local.set $1
      (i32.add
       (local.get $1)
       (i32.const 1)
      )
     )
     (br $0)
    )
   )
  )
  (return
   (local.get $2)
  )
 )
 (func $__main
  (block
  )
  (block
  )
  (block
  )
  (i32.store align=1
   (i32.const 0)
   (i32.const 8)
  )
  (i32.store align=1
   (i32.const 4)
   (i32.const 0)
  )
  (call $logString
   (i32.load align=1
    (i32.load align=1
     (i32.const 4)
    )
   )
  )
 )
)

compiler.ts:110 Hi
index.ts:851 compileCount: 59/62
index.ts:852 compileFailed: 28,38,53
index.ts:853 runCount: 58/62
index.ts:854 runFailed: 13,28,38,53